[{"title":"一周年记","url":"http://thirtyyuan.github.io/2018/12/01/一周年记/","content":"<p>如果你看到这篇文章，说明我来到「梦里」一周年了。</p>\n<h3 id=\"憧憬\"><a href=\"#憧憬\" class=\"headerlink\" title=\"憧憬\"></a>憧憬</h3><p>前些年追美剧「硅谷」，看到那群人每天聚在一起，为了共同的梦想而不停「战斗」着。或是激烈的争论着、或是放纵的欢庆着，觉得他们真的超级幸福。现在的我，也和他们一样幸福，虽然我不是他们那样的极客，但是我过着自己向往的、与他们相似的生活。<a id=\"more\"></a></p>\n<h3 id=\"现实\"><a href=\"#现实\" class=\"headerlink\" title=\"现实\"></a>现实</h3><p>一年前，秋季校招基本已经结束，呆在一家「温饱」的公司让我感到绝望，感觉我的人生就要这样荒废了，终将一事无成；再加上没有参加本能赢的「建模」比赛而错过保研资格。二十几年的努力，从小学不做完数学题不吃饭、到高中因为感觉要考不上一本而开始拼命学习、再到大学在周围同学休息娱乐、复习时间我在写代码、研究单片机（虽然是断断续续没什么大的收获），梦想逐渐从「保持优秀的学习成绩」到「成为自己的偶像，改变世界」。但面对眼前「平静而祥和」生活，对我而言简直就是噩梦，还有什么比感觉到自己离梦想越来越远、感到自己终究碌碌无为更可怕的事？绝望之际，我决定试着投简历，看看有没有重新调整航向的机会。</p>\n<p>不出所料，几乎全部的简历都被拒了，原因很简单，觉得我能力不够，我想是我大二、大三浪费了太多时光的缘故吧，虽然那时候同学看我很努力，只有我自己知道自己是「看上去很努力」。之后的一段时间，习惯了打开邮箱收到拒信，但是我仍然保持着继续努力学习的心态，始终坚信「付出总会有收获」。</p>\n<p>随着秋招接近尾声，眼看机会渐渐渺茫，上班时间无聊得刷微博的我偶然间看到 Q 哥一条招聘微博，因为他提到了不要求基础很好（知道我有多怂了吧😂）。我抱着试一试的心态，真的只敢是试一试，甚至是「见业界前辈一面也好」的心态来到杭州面试。很幸运，我勉勉强强符合团队要求。得知面试过了，我很快地爬到老和山顶，望着远处的西湖、和路人聊天，压抑两个月的情绪终于被释放出来，真的想不到什么词汇形容我当时的开心…终于能到自己向往的环境、团队中工作学习了，多少年了，一直期待着这一天！之后的一年用事实证明，我的期待，从没让我失望过，每一天都充满了新的挑战，每天都在感受着逐渐成长、强大的自己，这让我很享受。</p>\n<h3 id=\"初识一周\"><a href=\"#初识一周\" class=\"headerlink\" title=\"初识一周\"></a>初识一周</h3><p>还记得自己刚来时，正值周五，Q 哥不在，飞机哥和亮仔请我去「玉荣府」吃了一顿饭，那可能是我从 9 月到 12 月吃得最像样的一顿了😂然后记住了亮仔说的「Q 哥不在，多吃点」。后来想想，可能是因为平时都是吃食堂，吃来吃去都习惯了食堂的味道，毕竟，「监狱」里是没有机会挑食的。巧合的是，一年后的今天，秋哥又不在，我们又再次出去「多吃点」。</p>\n<h3 id=\"噩梦\"><a href=\"#噩梦\" class=\"headerlink\" title=\"噩梦\"></a>噩梦</h3><p>第二周开始，3.17 迭代正式打响，噩梦般的一个月也随之开始。当时虽有一丝丝 Android 开发基础，但是实在太薄弱了，加之当时需求是修改 IM、房间这一块，都是很难啃的骨头。只有很简单的事情我可以做，于是我的月度总结，我永远都忘不了那种尴尬或是耻辱：「写了一个列表、一个普通页面，帮助完成测试」。无论自己基础有多差、别人怎么安慰我、替我说好话，我也无法接受那样的自己，因为，要知道这是一个月的工作量。况且那个普通页面（无法忘记的老版本聊天设置页）因为要同时调用两个接口，我甚至都不会写，头晕之下，问亮老师：“这个页面的 Adapter 怎么写？”。亮老师嫌弃我没？我不知道，但是特别感谢亮老师没有骂我或表现出嫌弃之情，因为稍微有点 Android 开发经验的人都知道 Adapter 是用在列表页面中的，普通页面跟它可以说几乎没半点关系。</p>\n<p>后来亮亮可能看我实在写不出两个接口同时调用的页面，索性放弃自己的工作时间、用了两三个小时帮我写好了…过程中还一步一步跟我说为什么这么写，这么写有什么问题吗？嗯，再加之他在之后的时间里表现出的严密逻辑，所以我才会在前文、平时开玩笑似的称呼他为亮老师。后来，Q 哥、若琳姐在月会总结时还夸我帮助团队测试、减轻了团队负担，想想就很惭愧。要面子的我无法接受，但又无可奈何，自己的基础实在太差，眼高手低不能解决问题，只有真正着眼当下，找出问题所在，并每天为之努力才能解决问题。看着现在新同学比我当时顺手多了，就会很羡慕他们，一两个月的产出比我当时多多了，不知道是不是会比我当时少一点煎熬和痛苦？</p>\n<p>另外记得刚来时，不怕说出来丢人，我连基本的 git 命令都不知道，于是每次 rebase 产生冲突，就毫无头绪，总是和旁边的亮亮说「亮亮，我刚执行了什么操作，有冲突了，你帮我看看？」。每每遇到这种时候，总觉得丢人，怎么办呢？于是那个月，我每天回去，都拿着手机看《Pro Git》。由于它英文版也通俗易懂，于是我想借此机会锻炼自己英语阅读能力。因为才初学某项知识，在打基础的时候就怕读英文，以后会很受局限，到了某天，成长为某个领域的 topper，这时候再想深入研究，只看中文文档绝对会拖后腿。扯远了，就这样，借助每天睡觉前的时间，两、三周时间读完了前三章（我知道这并不快），至此受益至今。另外当时上班时间比这会儿长几个小时，每天都很困，但我知道得坚持看，不看只会继续限制自己的发展。现在看到大多数同学刚进来就能很熟练的使用 git，便会产生羡慕之情。</p>\n<p>那时候某天下班时间我在玩游戏，被 Q 哥看到了，他跟我说「你知道我为了让你来这儿多么不容易吗？」。从他眼中我感受到了失望、伤心，不知他心里是否如此，但是那个表情我至今清晰记得。所以，如果有同学还玩游戏的话，想想你是多么让对你充满希望、为你付出心血的人失望的吧，你还好意思、有脸玩游戏吗？</p>\n<h3 id=\"光荣的倒数第一\"><a href=\"#光荣的倒数第一\" class=\"headerlink\" title=\"光荣的倒数第一\"></a>光荣的倒数第一</h3><p>没过多久，「新春刷题竞赛」正式开始了，当时我觉得：平时实战经验不足可以作为搞不好的理由，那刷题这种只需要练习、动脑就能掌握，并且大学也有过了解的东西没理由再输了吧？于是我的刷题数在比赛期间一直很稳定并保持在队伍前列，到最终比赛时，要求是：随机抽取 4 题，做其中 3 道，满分 30 分，编译不过 0 分。于是我成功的拿下了「并列倒数第一」的 0 分，不过这次失败得挺光荣的。因为 4 题中有 2 道 DP，另外还有一道更难的忘了是啥，拿到题目的时候 Q 哥就笑着对我说 “这些题有点意思” （大意，大概就是觉得我做不出来了吧😂）。然后我把两道 DP 做出来了，时间不够了。在提示下检查了大括号，最后还是成功的没写结尾的大括号，我记得我是写了的…粗心大意+1，这在开发中真的很要命。要不然拿下 20 分，好像就是第三名的成绩了。但万事没有如果，失败了就是失败了，不过结果还算让自己满意吧，只要不辜负别人的期望、对得起自己的努力就足够了。</p>\n<h3 id=\"艰难的扩张之路\"><a href=\"#艰难的扩张之路\" class=\"headerlink\" title=\"艰难的扩张之路\"></a>艰难的扩张之路</h3><p>三、四月份开始，从打杂写了部分日记页、个人主页的布局文件（没错，仅仅是布局文件），到逐渐接手日记页、个人主页，开始了业务扩张之路，从此走向漫长的、 Bug 一堆的测试反馈时代。为什么这么说呢？因为我的速度差别人太多，开发进度跟不上，整个迭代通常都是我最后完成（虽然现在好像也是，大写的尴尬😅）。在测试反馈的问题数量上，简直不堪入目，写得一堆问题不说，解决速度也是很堪忧。这里没有什么好说的，就是多练习、多总结，记得：多总结！甚至每次看都可以写篇项目熟悉笔记，直到你能把那部分东西和新同学讲清楚。后来踩坑多了，能踩的坑自然就少了，即使遇到，也能更快解决。这里虽然说是坑，其实就是自己不熟悉项目、基础知识导致的，所以，切记要如饥似渴的熟悉项目代码，空闲之余认真看相关的基础知识。战时快速解决问题，回过头来系统复习基础知识，那样无论来什么需求、出什么相关的 Bug，你都能很快的解决，也就不至于在两个迭代过渡期间无事可做了。</p>\n<h3 id=\"没有对比，就没有伤害\"><a href=\"#没有对比，就没有伤害\" class=\"headerlink\" title=\"没有对比，就没有伤害\"></a>没有对比，就没有伤害</h3><p>后来回学校了一个月，好像没什么长进，虽然保持了之前的开发水平，但是这没什么可以说的，都是最基本的、应该做到的事情。果然还是要有事可做啊，感觉不能闲，闲了就颓废了，学习计划也不了了之。</p>\n<p>回来后，新的两轮迭代，分别是梵希哥、韩董负责大部分后端 + iOS，也就是「全栈」吧😂而我只负责 Android 客户端，谁更快开发完成当期项目呢？结果是我被他们两个分别虐爆…仍然记得，同时开始工作，他们大概一天时间完成后端开发，一两天时间完成 iOS 开发，而我呢？大概一周时间完成 Android 开发。啥感觉？两种感觉，一是意识到自己宛如智障般的写代码简直低效；二是请教他们后将原因归结于对项目的不熟悉。日常开发中，飞机哥也因为我「不熟悉项目」、「钻牛角尖」两个大毛病着重教育了好几次，听的时候好难过，因为真的是自己没做好，甚至都没有那个意识去提高项目熟悉度，想想就很可怕，直到遇到需求才临时去看、去想，甚至到写代码时边写边想、完全在碰运气，导致我的开发效率如此低下。</p>\n<p>后来两个月，我决定痛定思痛、洗心革面，再也不看什么技术书籍、博客、视频了，专注地把项目几乎全部文件看了一遍（IM、Push除外…该补补了），基本知道什么东西在哪、怎么实现的、以及它和其他部分有怎样的关系等一系列的问题，基本做到心中有数。然而还没有做到飞机哥期望的那样，就很惭愧，可能是还不够用心，这点飞机哥建议我把自己当作新手，想想自己刚刚上手项目时想了解什么，自己讲给自己听，类似于「小黄鸭调试法」；而努力程度上也有所欠缺，经常会忘了还要继续熟悉项目这一点，更偏重于学其他知识，哪怕根本用不上。然而用不上就不能立刻产生价值，这是非常可怕的，商业上没有人愿意做毫无收获的投资，所以学以致用才是硬道理。以上只是针对提高日常开发效率而言，一旦空下来就得学基础知识。毕竟「无用的」基础知识还是得牢固，因为你不知道哪一天，它会成为你致命的短板。</p>\n<p>这个阶段，特别要提到飞机哥对我的帮助，处了上面的熟悉项目的方法、学习项目与学习基础知识并不矛盾的观点，还教会我了两种解决方案按不同维度来打分，最后决定使用哪一种方案。另外他还教我在月会总结时，从不同角度想想自己的成绩，从而使得我逐渐克服了不知道有什么好总结的毛病，使我的月会总结看上去更加丰富饱满。而提高开发效率的方法，我自己也琢磨出一套优先级确定方案：根据用户感知度确定做事的优先级。以刷新页面为例：一种是全局刷新，保证不会有问题，但是耗流量；还有一种是局部刷新，虽然省流量但是需要用心细调。如果时间特别紧，我会选择第一种全局刷新方案，毕竟「Done is better than perfect」。如果时间宽裕，我会选择第二种，追求极致才是我的终极目标。</p>\n<h3 id=\"新同学\"><a href=\"#新同学\" class=\"headerlink\" title=\"新同学\"></a>新同学</h3><p>最近，新一届的实习生们陆续来到公司，从他们身上看到了自己的影子：充满斗志、心怀不惧（方能翱翔于天际），但偶尔也会迷茫、倍感压力。我会时不时替他们操心、着急，实在做的不好、而他们没有意识到的地方，我会毫不犹豫的指出，或是事后发一段长文字给他们，只希望能够帮他们少走些弯路，尽快成长起来，成为自己心中曾经仰慕的大神、或是一个「更完整的」人。他们中不乏能力很强的同学，特别是有过一定开发经验、实习经验的，只用了短短一两个月的时间，cover 住了我用三、四个月时间才能 cover 住的业务（不论前、后端），心中不免有一丝敬佩，常让我感慨「后生可畏」。但同时，我也看到他们身上的缺点：不够野蛮。记得 Q 哥之前喝酒后常问我：什么时候能够 cover 住 Android 客户端？又常常说起让我野蛮生长。一年了，我总是说「快了、快了」，虽然我还是没做到，不及同期的 kiuber 和 Gin 野蛮，但也算努力吧，心中的狼性只增不减。</p>\n<p>但不知是否是他们能力很强的缘故，他们对学习、对技术的渴望总是感觉弱那么一点，让我觉得不够拼命。有时候事情做完就完了，也不探究其中实现细节，一问起为什么，答一些「别的地方就是这么用的嘛」之类的话，让我感到震惊，因为这是典型的「只会搬砖」的码农的表现。下班休息时间、周天也不来公司学习（偷偷自学的另当别论）。虽然我去年刚来时完全是毫无头绪的乱学，浪费了很多时间，但我至少知道「我现在很菜，只有每天不断学习才能更快的成长起来」。我个人感觉：我们同期的，或是比我们早来的同学，也就是新同学眼中的前辈，休息时间总是表现得更渴望掌握新技术、新知识，那种对技术的探索欲、对掌握更大块知识的欲望更加强烈，看上去自然也就更加「工程师样」、更加的「野蛮」。</p>\n<h3 id=\"关于自律和坚持\"><a href=\"#关于自律和坚持\" class=\"headerlink\" title=\"关于自律和坚持\"></a>关于自律和坚持</h3><p>声明：我从没觉得我特别自律、坚持如一到值得大家学习，只是老是被提起，就说说我的看法吧。</p>\n<p>偶尔的自律是因为我深深感受到自律带给我的快乐比起放纵带给我的快乐更强、更久，我能意识到那种快乐才是我真正想要的。如果你想做到，在你下次面对诱惑时，想想自己想要的到底是什么？同时偶尔的放纵不应该自责，反而应该自我原谅（学习自《自控力》）；偶尔的坚持，是我目前为止发现的那些我想成为的人、我的偶像身上最容易模仿的一点，如果这都做不到，追赶他们也便无从谈起，只能默默承认自己的弱鸡。所以我偶尔的坚持，也许只是为了模仿他们。</p>\n<p>很惭愧今天周会 Q 哥说我是否做某项行动从不看他是否行动，其实不是的，有时候想赖床，想到他可能先到了，我就会赶紧起来，免得被批评或者自己内心过不去。大概也就是说，我也会在快不自律的边缘想到他。</p>\n<p>感谢的话我就不说了，反正我知道我内心有多么地感激每一个帮助过、关心过我的你们。</p>\n"},{"title":"Android Room with A View","url":"http://thirtyyuan.github.io/2018/07/29/Android_Room_with_A_View/","content":"<blockquote>\n<p>原文地址 <a href=\"https://codelabs.developers.google.com/codelabs/android-room-with-a-view/#0\" target=\"_blank\" rel=\"external\">Android Room with A View——Google Codelab</a></p>\n</blockquote>\n<h3 id=\"1-介绍\"><a href=\"#1-介绍\" class=\"headerlink\" title=\"1. 介绍\"></a>1. 介绍</h3><p> <a href=\"https://developer.android.com/topic/libraries/architecture/index.html\" target=\"_blank\" rel=\"external\">结构化组件</a> 的目的在于提供 app 架构指导，并因此提供有关于常见任务的库，如 生命周期管理、数据持久化。</p>\n<p>结构化组件帮助你用更少的模版代码通过健壮的、可测试的和可维护的方式构建应用程序。</p>\n<p>结构化组件提供了一个简单的、灵活的、实用的方式，从一些常见问题中解放你，使你能够专注于构建更好的产品体检。<br><a id=\"more\"></a></p>\n<h4 id=\"推荐给你的结构化组件是什么？\"><a href=\"#推荐给你的结构化组件是什么？\" class=\"headerlink\" title=\"推荐给你的结构化组件是什么？\"></a>推荐给你的结构化组件是什么？</h4><p>为了介绍专业术语，这里有一个对结构化组件的简介，以及它们是怎样一同工作的。注意，本文仅专注于介绍部分组件的基础知识，它们是：LiveData、ViewModel 和 Room。下图展示了这种结构的基本形式。<br><img src=\"https://ws1.sinaimg.cn/large/006tNc79ly1ftqjqb173gj30hc0a2757.jpg\" alt=\"结构的基本形式\"></p>\n<p>Entity：当于其他结构化组件一起工作时，这是一个带注释的类，用于描述数据库表。</p>\n<p>SQLite 数据库：在设备上，数据存储在 SQLite 数据库中。为简单起见，省略了其他存储选项，例如 Web 服务器。  Room 持久性库为你创建和维护此数据库。</p>\n<p>DAO：数据访问对象。它是 SQL 查询到函数的映射。你曾经必须在 SQLiteOpenHelper 类中精心定义这些方法。当你使用 DAO 时，你可以调用这些映射方法，而 Room 负责其余的操作。</p>\n<p>Room 数据库：SQLite 数据库之上的数据库层，负责处理你过去使用 SQLiteOpenHelper 处理的普通任务。它是数据库持有者，作为底层 SQLite 数据库的访问点，Room 数据库使用 DAO 向 SQLite 数据库发出查询。</p>\n<p>Repository（存储库）：它是你创建的类，例如 WordRepository 类。你使用存储库来管理多个数据源。</p>\n<p>ViewModel：为UI提供数据。充当存储库和UI之间的通信中心。隐藏于 UI 于数据源之间。 ViewModel 实例在配置更改后仍然存在。</p>\n<p>LiveData：可被观察的数据持有者类。始终保存/缓存最新的数据。数据发生变化时通知其观察者。 LiveData 有生命周期意识。 UI 组件只是观察相关数据，不会停止或恢复观察。 LiveData 自动管理所有这些，因为它在观察中能意识到相关的生命周期状态变化。</p>\n<h4 id=\"你将构建什么？（需求）\"><a href=\"#你将构建什么？（需求）\" class=\"headerlink\" title=\"你将构建什么？（需求）\"></a>你将构建什么？（需求）</h4><p>你将用 Android 结构化组件并为这些组件实现源自<a href=\"https://developer.android.com/topic/libraries/architecture/guide.html\" target=\"_blank\" rel=\"external\">应用架构指导</a>中的结构，以此来构建一个应用程序。这个示例应用程序再一个 Room 数据库中存储一个单词列表，并将它显示于 RecyclerView 中。该应用程序是很简易的，但它也足够复杂，因此你可以使用它作为模版，在其之上构建你的应用程序。</p>\n<p>在本次编程实验中，你将基于以下步骤构建应用程序：</p>\n<ul>\n<li>与数据库交互，拿到并保存数据，并用一些单词预先填充到数据库中。</li>\n<li>在 MainActivity 的 RecyclerView 中显示这些单词。</li>\n<li>当用户点击 「+」按钮时，打开第二个 Activity，当用户输入一个单词，将它添加到数据库和列表中。</li>\n</ul>\n<p><img src=\"https://ws1.sinaimg.cn/large/006tNc79ly1ftqlbkf0j6j30zk0jmtdg.jpg\" alt=\"需求\"></p>\n<h4 id=\"RoomWordSample-架构概览\"><a href=\"#RoomWordSample-架构概览\" class=\"headerlink\" title=\"RoomWordSample 架构概览\"></a>RoomWordSample 架构概览</h4><p>下图展示了该应用程序的全部片段，每个框（SQLite数据库除外）代表您将创建的类。</p>\n<p><img src=\"https://ws2.sinaimg.cn/large/006tNc79ly1ftqleczt69j30fi0cqq3c.jpg\" alt=\"项目结构\"></p>\n<h4 id=\"你将学到什么？\"><a href=\"#你将学到什么？\" class=\"headerlink\" title=\"你将学到什么？\"></a>你将学到什么？</h4><blockquote>\n<p>用结构化组件 Room 和 Lifecycles 库怎样设计并构建一个应用程序。</p>\n</blockquote>\n<p> 使用结构化组件并实现推荐的架构有很多步骤。最重要的是创建一个关于正在做什么、发生什么的心理模型（心里有数），并理解这些单个部分该如何组合到一起，以及数据是怎样流动的。当你使用该代码实验室时，不要只是复制粘贴代码，而要尝试从内部理解后着手构建。</p>\n<h3 id=\"2-创建你的应用程序\"><a href=\"#2-创建你的应用程序\" class=\"headerlink\" title=\"2. 创建你的应用程序\"></a>2. 创建你的应用程序</h3><p>打开 Android Studio 并按下列步骤创建应用程序：</p>\n<ul>\n<li>将该应用程序命名为 RoomWorkSample</li>\n<li>目标 API 设为 26+</li>\n<li>取消勾选 <code>include Kotlin support</code>和<code>include C++ support</code></li>\n<li>选中 <code>Phone &amp; Tablet</code> 并设置最小 SDK API 为 26</li>\n<li>选则 <code>Basic Activity</code></li>\n</ul>\n<p><img src=\"https://ws3.sinaimg.cn/large/006tNc79ly1ftqlv567hoj318g0yg0wc.jpg\" alt=\"Basic Activity\"></p>\n<h3 id=\"3-更新-gradle-文件\"><a href=\"#3-更新-gradle-文件\" class=\"headerlink\" title=\"3. 更新 gradle 文件\"></a>3. 更新 gradle 文件</h3><p>你必须添加组件库到你的 gradle 文件中。添加以下代码到 build.gradle (Module: app) 文件末尾的依赖 (dependencies) 中。</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Room components</span></div><div class=\"line\">implementation <span class=\"string\">\"android.arch.persistence.room:runtime:$rootProject.roomVersion\"</span></div><div class=\"line\">annotationProcessor <span class=\"string\">\"android.arch.persistence.room:compiler:$rootProject.roomVersion\"</span></div><div class=\"line\">androidTestImplementation <span class=\"string\">\"android.arch.persistence.room:testing:$rootProject.roomVersion\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Lifecycle components</span></div><div class=\"line\">implementation <span class=\"string\">\"android.arch.lifecycle:extensions:$rootProject.archLifecycleVersion\"</span></div><div class=\"line\">annotationProcessor <span class=\"string\">\"android.arch.lifecycle:compiler:$rootProject.archLifecycleVersion\"</span></div></pre></td></tr></table></figure>\n<p>在你的 build.gradle (Project: RoomWordsSample) 文件末尾添加如下代码所示的版本号：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">ext &#123;</div><div class=\"line\">   roomVersion = <span class=\"string\">'1.0.0'</span></div><div class=\"line\">   archLifecycleVersion = <span class=\"string\">'1.1.0'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"4-创建-Entity-实体\"><a href=\"#4-创建-Entity-实体\" class=\"headerlink\" title=\"4. 创建 Entity (实体)\"></a>4. 创建 Entity (实体)</h3><p>该应用程序的数据是单词，每一个单词是一个实体 (Entity)。创建一个叫做  <code>Word</code> 的类来描述一个单词实体。你需要为数据模型类 (data model class) 添加一个构造器和一个<code>getter</code> 方法，以此告知 <code>Room</code> 类如何实例化你的对象。</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/006tNc79gy1ftqqtcnm83j309a05l74d.jpg\" alt=\"Word 实体\"></p>\n<p>这里是实现代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Word</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"keyword\">private</span> String mWord;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Word</span><span class=\"params\">(@NonNull String word)</span> </span>&#123;<span class=\"keyword\">this</span>.mWord = word;&#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getWord</span><span class=\"params\">()</span></span>&#123;<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.mWord;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>为了使<code>Word</code>类对 Room 数据库有意义，你需要注解它。注解标明了这个类的每一部分与数据库中条目的关系。Room 用这些信息生成代码。</p>\n<ul>\n<li><code>@Entity(tableName = &quot;word_table&quot;)</code><br>每个 <code>@Entity</code> 类表示一张表中的一个实体。你对类的注解声明它是一个实体。特别的，你可以给它定义一个不同于类名的表名。</li>\n<li><code>@PrimaryKey</code><br>每个实体都需要一个主键。为了保持简单，每个单词都作为他自己的主键。</li>\n<li><code>@NonNull</code><br>声明一个参数、域或方法返回值不可以为 null。</li>\n<li>@ColumnInfo(name = “word”)<br>特别的，如果你想要这个表中列的名字不同于成员变量的名字，可以使用该注解。</li>\n<li>存在数据库中的每个域必须是 public 或 有 “getter” 方法。本例中仅提供一个 <code>getWord()</code> 方法。</li>\n</ul>\n<p>你可以在这个链接中找到完整注解列表： <a href=\"https://developer.android.com/reference/android/arch/persistence/room/package-summary.html\" target=\"_blank\" rel=\"external\">Room packge summary reference</a>。<br>像下面代码一样使用注解更新你的 <code>Word</code>类。如果你输入了注解，Android Studio 会自动引入它。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Entity</span>(tableName = <span class=\"string\">\"word_table\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Word</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"meta\">@PrimaryKey</span></div><div class=\"line\">   <span class=\"meta\">@NonNull</span></div><div class=\"line\">   <span class=\"meta\">@ColumnInfo</span>(name = <span class=\"string\">\"word\"</span>)</div><div class=\"line\">   <span class=\"keyword\">private</span> String mWord;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Word</span><span class=\"params\">(String word)</span> </span>&#123;<span class=\"keyword\">this</span>.mWord = word;&#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getWord</span><span class=\"params\">()</span></span>&#123;<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.mWord;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>当你复制粘贴以上代码时，如果产生了注解有关的错误，你需要手动引入这些注解：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> android.arch.persistence.room.ColumnInfo;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> android.arch.persistence.room.Entity;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> android.arch.persistence.room.PrimaryKey;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> android.support.annotation.NonNull;</div></pre></td></tr></table></figure>\n<p>提示：你可以通过下面这样注解主键来 <a href=\"https://developer.android.com/reference/android/arch/persistence/room/PrimaryKey.html\" target=\"_blank\" rel=\"external\">自动生成（autogenerate）</a> 不同的键。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Entity</span>(tableName = <span class=\"string\">\"word_table\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Word</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@PrimaryKey</span>(autoGenerate = <span class=\"keyword\">true</span>)</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@NonNull</span></div><div class=\"line\"><span class=\"keyword\">private</span> String word;</div><div class=\"line\"><span class=\"comment\">//..other fields, getters, setters</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>参考 <a href=\"https://developer.android.com/training/data-storage/room/defining-data.html\" target=\"_blank\" rel=\"external\">用 Room 实体定义数据</a>。</p>\n<h3 id=\"5-创建-DAO（Data-Access-Object）\"><a href=\"#5-创建-DAO（Data-Access-Object）\" class=\"headerlink\" title=\"5. 创建 DAO（Data Access Object）\"></a>5. 创建 DAO（Data Access Object）</h3><h4 id=\"什么是-DAO？\"><a href=\"#什么是-DAO？\" class=\"headerlink\" title=\"什么是 DAO？\"></a>什么是 DAO？</h4><p>在 <a href=\"https://developer.android.com/training/data-storage/room/accessing-data.html\" target=\"_blank\" rel=\"external\">DAO</a> 中，你特定的 SQL 查询和关于他们的方法调用。编译器检查 SQL 并从会话注解中为常见查询生成查询语句，例如 <code>@Insert</code>。</p>\n<ul>\n<li>DAO 必须是一个接口或抽象类。</li>\n<li>默认的所有的查询操作都在独立线程中执行。</li>\n<li>Room 使用 DAO 为你的代码创建干净的 API。</li>\n</ul>\n<h4 id=\"实现-DAO\"><a href=\"#实现-DAO\" class=\"headerlink\" title=\"实现 DAO\"></a>实现 DAO</h4><p>本示例中的 DAO 是一个基本的、并为获取所有的单词、插入单词、删除所有的单词提供了查询操作。</p>\n<ol>\n<li>创建一个叫做 <code>WordDao</code> 的接口。</li>\n<li>使用 <code>@Dao</code> 注解这个类，以标示它为 Room 的一个 DAO 类。</li>\n<li>声明一个插入一个单词的方法：<code>void insert(Word word)</code>；</li>\n<li>用 <code>@Insert</code>注解这个方法。你不必提供任何 SQL！（也有 <code>@Delete</code> 和 <code>@Update</code> 注解用于删除和更新一行数据／实体，但是本实例中并用不到它们）</li>\n<li>声明一个方法用于删除全部单词：<code>void deleteAll();</code>。</li>\n<li>有个非会话注解用于删除多个实体，这个注解使用泛型来注解一个方法<code>@Query</code>。</li>\n<li>提供 SQL 查询作为 <code>@Query</code> 的字符串参数。用 <code>@Query</code> 为了完成查询操作需要提供 SQL 语句。<code>@Query(&quot;DELETE FROM word_table&quot;)</code></li>\n<li>创建一个方法以得到全部单词：<code>getAllWords();</code>。这个方法返回一个 <code>Words</code>类型的<code>List</code>。<code>List&lt;Word&gt; getAllWords()</code>;</li>\n<li>用下面的 SQL 语句注解 8 中的方法：<code>@Query(&quot;SELECT * from word_table ORDER BY word ASC&quot;)</code>。</li>\n</ol>\n<p>以下是完整代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Dao</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">WordDao</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"meta\">@Insert</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(Word word)</span></span>;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"meta\">@Query</span>(<span class=\"string\">\"DELETE FROM word_table\"</span>)</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">deleteAll</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"meta\">@Query</span>(<span class=\"string\">\"SELECT * from word_table ORDER BY word ASC\"</span>)</div><div class=\"line\">   <span class=\"function\">List&lt;Word&gt; <span class=\"title\">getAllWords</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>提示：对于这个应用程序，对单词的排序不是必须的。然而，默认是不提供排序的，并且排序能更直接、简单的测试。</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>提示：当插入数据时，你能够提供一个冲突策略。<br>在本次示例中，你不需要一个冲突策略，因为单词是你的主键，并且 SQL 默认的表现策略是舍弃（ABORT），因此你不可以用相同的主键插入两个 items 到数据库中。<br>如果有冲突，你可以用 <code>@Insert(onConflict = OnConflictStrategy.REPLACE)</code> 来代替原有的数据。</p>\n</blockquote>\n<p>查看关于 <a href=\"https://developer.android.com/training/data-storage/room/accessing-data.html\" target=\"_blank\" rel=\"external\">Room Daos</a> 的更多内容。</p>\n<h3 id=\"6-LiveData-类\"><a href=\"#6-LiveData-类\" class=\"headerlink\" title=\"6. LiveData 类\"></a>6. LiveData 类</h3><p>当数据改变时，你通常想要做一些事情，例如更新 UI 中显示的数据。这意味着你不得不观察数据，以至于当它改变时，你可以作出响应。根据数据存储方式的不同，这通常很棘手。观察应用程序的多个组件之间的数据更改可以在组件之间创建明确，严格的依赖关系路径。这使得测试和调试变得困难等等。这会使得测试、调试困难等等。</p>\n<p>LiveData，一个为了数据观察的生命周期库，解决了上述问题。使用一个类型为 LiveData 的返回值在你的方法声明中，然后 Room 产生全部必须的代码，在数据库更新时来更新你的 LiveData。</p>\n<blockquote>\n<p>如果你独立于 Room 使用 <code>LiveData</code>，你必须管理更新数据。<code>LiveData</code>没有公开、可用的方法来更新存储的数据。</p>\n<p>如果开发者想要更新存储的数据，你必须用 <a href=\"https://developer.android.com/reference/android/arch/lifecycle/MutableLiveData.html\" target=\"_blank\" rel=\"external\">MutableLiveData</a> 而不是 <code>LiveData</code>。<code>MutableLiveData</code> 类有两个公共方法允许你给一个<code>LiveData</code>对象设置值，<a href=\"https://developer.android.com/reference/android/arch/lifecycle/MutableLiveData.html#setValue(T\" target=\"_blank\" rel=\"external\">setValue(T)</a>) 和 <a href=\"https://developer.android.com/reference/android/arch/lifecycle/MutableLiveData.html#postValue(T\" target=\"_blank\" rel=\"external\">postValue(T)</a>)。通常，<code>MutableLiveData</code> 用于 <a href=\"https://developer.android.com/reference/android/arch/lifecycle/ViewModel.html\" target=\"_blank\" rel=\"external\">ViewModel</a> 中，并且<code>ViewModel</code>仅暴露不可变的 <code>LiveData</code> 对象给观察者。</p>\n</blockquote>\n<p>在 <code>WordDao</code>中，改变 <code>getWords()</code>方法签名使得它返回被<code>LiveData</code> 包裹的<code>List&lt;Word&gt;</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Query</span>(<span class=\"string\">\"SELECT * from word_table ORDER BY word ASC\"</span>)</div><div class=\"line\">   LiveData&lt;List&lt;Word&gt;&gt; getAllWords();</div></pre></td></tr></table></figure>\n<p>再之后的示例中，你会创建一个数据的 <code>Observer</code>在<code>MainActivity</code>的<code>onCreate()</code> 方法中，并且复写观察者的 <code>onChanged()</code> 方法。当<code>LiveData</code>改变，观察者会被通知到，并调用 <code>onChanged()</code>方法。你将更新在 <code>adapter</code>中的缓存数据，并且<code>adapter</code> 将更新用户可见的内容。</p>\n<blockquote>\n<p>查看<a href=\"https://developer.android.com/topic/libraries/architecture/livedata.html\" target=\"_blank\" rel=\"external\">LiveData</a>文档来学习更多关于其他使用<code>LiveData</code>的方法，或者查看这个视频：<br><a href=\"https://www.youtube.com/watch?v=jCw5ib0r9wg\" target=\"_blank\" rel=\"external\">Architecture Components: LifeData and Lifecycle – YouTube</a></p>\n</blockquote>\n<h3 id=\"7-加入-Room-数据库\"><a href=\"#7-加入-Room-数据库\" class=\"headerlink\" title=\"7. 加入 Room 数据库\"></a>7. 加入 Room 数据库</h3><h4 id=\"Room-数据库是什么？\"><a href=\"#Room-数据库是什么？\" class=\"headerlink\" title=\"Room 数据库是什么？\"></a>Room 数据库是什么？</h4><p>Room 是一个在 SQLite 数据库之上的数据库层。Room 负责处理你过去使用 SQLiteOpenHelper 所做的常见工作。</p>\n<ul>\n<li>Room 用 DAO 问题查询它的数据库。</li>\n<li>默认的，为了避免低下的 UI 性能，Room 不允许你在主线程进行操作。在需要时，<code>LiveData</code> 自动的使用这些规则在后台线程运行异步操作。</li>\n<li>Room 提供了对 SQLite 的编译时检查。</li>\n<li>你的 Room 类必须是抽象的并且继承于 <code>RoomDatabase</code>。</li>\n<li>通常，你在整个应用程序中仅仅需要一个 Room 数据库实例。</li>\n</ul>\n<h4 id=\"实现-Room-数据库\"><a href=\"#实现-Room-数据库\" class=\"headerlink\" title=\"实现 Room 数据库\"></a>实现 Room 数据库</h4><ol>\n<li>创建一个继承于 <code>RoomDatabase</code> <code>public abstract</code>类，并调用它的 <code>WordRoomDatabase</code>。<code>public abstract class WordRoomDatabase extends RoomDatabase {}</code></li>\n<li>注解这个类为一个 Room 数据库，声明这个实体属于一个数据库，并设置它的版本号。列出实体将在数据库中创建的表。</li>\n<li>定义为数据库工作的 DAOs。为每一个 @Dao 提供一个抽象的 “getter” 方法。<code>public abstract WordDao wordDao();</code></li>\n</ol>\n<p>代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Database</span>(entities = &#123;Word.class&#125;, version = <span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WordRoomDatabase</span> <span class=\"keyword\">extends</span> <span class=\"title\">RoomDatabase</span> </span>&#123;</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> WordDao <span class=\"title\">wordDao</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li>使得 <code>WordRoomDatabase</code> 为一个单例，防止同时打开多个数据库实例。</li>\n</ol>\n<p>代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> WordRoomDatabase INSTANCE;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> WordRoomDatabase <span class=\"title\">getDatabase</span><span class=\"params\">(<span class=\"keyword\">final</span> Context context)</span> </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">if</span> (INSTANCE == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">       <span class=\"keyword\">synchronized</span> (WordRoomDatabase.class) &#123;</div><div class=\"line\">           <span class=\"keyword\">if</span> (INSTANCE == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">               <span class=\"comment\">// Create database here</span></div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div><div class=\"line\">   <span class=\"keyword\">return</span> INSTANCE;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li>添加这段代码来得到数据库。这段代码使用 Room 数据库构建器从 WordRoomDatabase 类创建一个 RoomDatabase 对象到 application context 中，并命名为 <code>&quot;word_database&quot;</code>。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Create database here</span></div><div class=\"line\">INSTANCE = Room.databaseBuilder(context.getApplicationContext(),</div><div class=\"line\">       WordRoomDatabase.class, <span class=\"string\">\"word_database\"</span>)</div><div class=\"line\">       .build();</div></pre></td></tr></table></figure>\n<p>以下是这个类的完整代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Database</span>(entities = &#123;Word.class&#125;, version = <span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WordRoomDatabase</span> <span class=\"keyword\">extends</span> <span class=\"title\">RoomDatabase</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> WordDao <span class=\"title\">wordDao</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> WordRoomDatabase INSTANCE;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">static</span> WordRoomDatabase <span class=\"title\">getDatabase</span><span class=\"params\">(<span class=\"keyword\">final</span> Context context)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (INSTANCE == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           <span class=\"keyword\">synchronized</span> (WordRoomDatabase.class) &#123;</div><div class=\"line\">               <span class=\"keyword\">if</span> (INSTANCE == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                   INSTANCE = Room.databaseBuilder(context.getApplicationContext(),</div><div class=\"line\">                           WordRoomDatabase.class, <span class=\"string\">\"word_database\"</span>)</div><div class=\"line\">                           .build();                </div><div class=\"line\"></div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> INSTANCE;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>在本次示例中，你将不用升级实体和版本号。当你更改数据库架构，你需要更新版本号并定义怎样处理迁移。</p>\n<p>例如，销毁并重建数据库是一个好的迁移策略。对于一个真正的应用程序，你必须实现迁移策略。详见：<a href=\"https://medium.com/google-developers/understanding-migrations-with-room-f01e04b07929\" target=\"_blank\" rel=\"external\">Understanding migrations with Room</a>。</p>\n<p>在 Android Studio 中，如果你在复制粘贴这段代码时，或在 build 进程期间得到一些错误，选则 Build &gt; Clean Project。然后选则 Build &gt; Rebuild Project，然后再次编译。如果你用提供的代码，当你构建应用程序时应该是没有错误的。</p>\n</blockquote>\n<h3 id=\"8-创建仓库（存储库）\"><a href=\"#8-创建仓库（存储库）\" class=\"headerlink\" title=\"8. 创建仓库（存储库）\"></a>8. 创建仓库（存储库）</h3><h4 id=\"仓库是什么？\"><a href=\"#仓库是什么？\" class=\"headerlink\" title=\"仓库是什么？\"></a>仓库是什么？</h4><p>仓库是一个能够访问多个数据源的抽象类。仓库不是结构化组件库的一部分，但是是建议的代码分离和结构化的最佳实践。一个 <code>Repository</code> 类处理数据操作。它用干净的 API 为应用程序的其他部分提供数据。</p>\n<p> <img src=\"https://ws1.sinaimg.cn/large/006tNc79gy1ftqvnr2tvrj30ds04oaa3.jpg\" alt=\"Repository\"></p>\n<h4 id=\"为什么使用仓库？\"><a href=\"#为什么使用仓库？\" class=\"headerlink\" title=\"为什么使用仓库？\"></a>为什么使用仓库？</h4><p>一个仓库管理查询线程，并允许你使用多个后端。在大多数例子中，仓库实现了是从网络抓取数据，还是用缓存到本地数据库中的数据的逻辑。</p>\n<h4 id=\"实现仓库\"><a href=\"#实现仓库\" class=\"headerlink\" title=\"实现仓库\"></a>实现仓库</h4><ol>\n<li>创建一个叫做<code>WordRepository</code>的公共类。</li>\n<li>添加 DAO 和单词列表 (the list of words) 为成员变量。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> WordDao mWordDao;</div><div class=\"line\"><span class=\"keyword\">private</span> LiveData&lt;List&lt;Word&gt;&gt; mAllWords;</div></pre></td></tr></table></figure>\n<ol>\n<li>添加一个构造器，在其中拿到数据库并初始化成员变量。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">WordRepository(Application application) &#123;</div><div class=\"line\">    WordRoomDatabase db = WordRoomDatabase.getDatabase(application);</div><div class=\"line\">    mWordDao = db.wordDao();</div><div class=\"line\">    mAllWords = mWordDao.getAllWords();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li>为<code>getAllWords()</code>添加一层封装。Room 在一个独立的线程执行所有的操作。当数据改变了，被观察的 <code>LiveData</code>将通知其观察者。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">WordRepository(Application application) &#123;</div><div class=\"line\">    WordRoomDatabase db = WordRoomDatabase.getDatabase(application);</div><div class=\"line\">    mWordDao = db.wordDao();</div><div class=\"line\">    mAllWords = mWordDao.getAllWords();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li>为 <code>insert()</code>方法添加一层封装。你必须在非主线程调用它，否则你的应用程序将崩溃。Room 确保你不能在主线程做任何耗时操作，以免阻塞 UI。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">insert</span> <span class=\"params\">(Word word)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">new</span> insertAsyncTask(mWordDao).execute(word);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li>关于 <code>AsyncTask</code>没什么惊奇的，所以你经管 copy 它吧。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">insertAsyncTask</span> <span class=\"keyword\">extends</span> <span class=\"title\">AsyncTask</span>&lt;<span class=\"title\">Word</span>, <span class=\"title\">Void</span>, <span class=\"title\">Void</span>&gt; </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> WordDao mAsyncTaskDao;</div><div class=\"line\"></div><div class=\"line\">    insertAsyncTask(WordDao dao) &#123;</div><div class=\"line\">        mAsyncTaskDao = dao;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Void <span class=\"title\">doInBackground</span><span class=\"params\">(<span class=\"keyword\">final</span> Word... params)</span> </span>&#123;</div><div class=\"line\">        mAsyncTaskDao.insert(params[<span class=\"number\">0</span>]);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以下是完整代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WordRepository</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"keyword\">private</span> WordDao mWordDao;</div><div class=\"line\">   <span class=\"keyword\">private</span> LiveData&lt;List&lt;Word&gt;&gt; mAllWords;</div><div class=\"line\"></div><div class=\"line\">   WordRepository(Application application) &#123;</div><div class=\"line\">       WordRoomDatabase db = WordRoomDatabase.getDatabase(application);</div><div class=\"line\">       mWordDao = db.wordDao();</div><div class=\"line\">       mAllWords = mWordDao.getAllWords();</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   LiveData&lt;List&lt;Word&gt;&gt; getAllWords() &#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> mAllWords;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">insert</span> <span class=\"params\">(Word word)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">new</span> insertAsyncTask(mWordDao).execute(word);</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">insertAsyncTask</span> <span class=\"keyword\">extends</span> <span class=\"title\">AsyncTask</span>&lt;<span class=\"title\">Word</span>, <span class=\"title\">Void</span>, <span class=\"title\">Void</span>&gt; </span>&#123;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">private</span> WordDao mAsyncTaskDao;</div><div class=\"line\"></div><div class=\"line\">       insertAsyncTask(WordDao dao) &#123;</div><div class=\"line\">           mAsyncTaskDao = dao;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"meta\">@Override</span></div><div class=\"line\">       <span class=\"function\"><span class=\"keyword\">protected</span> Void <span class=\"title\">doInBackground</span><span class=\"params\">(<span class=\"keyword\">final</span> Word... params)</span> </span>&#123;</div><div class=\"line\">           mAsyncTaskDao.insert(params[<span class=\"number\">0</span>]);</div><div class=\"line\">           <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>对于这个简单的例子，仓库并没有做太多事。更复杂的实现参看 <a href=\"https://github.com/googlesamples/android-architecture-components/tree/master/BasicSample\" target=\"_blank\" rel=\"external\">BasicSample</a>。</p>\n</blockquote>\n<h3 id=\"9-创建-ViewModel\"><a href=\"#9-创建-ViewModel\" class=\"headerlink\" title=\"9. 创建 ViewModel\"></a>9. 创建 ViewModel</h3><h4 id=\"什么是-ViewModel\"><a href=\"#什么是-ViewModel\" class=\"headerlink\" title=\"什么是 ViewModel\"></a>什么是 ViewModel</h4><p> <code>ViewModel</code>的角色是提供数据给 UI 并在配置改变时继续存在。一个 <code>ViewModel</code> 在仓库和 UI 之间作为通信中心。你也能用<code>ViewModel</code>在 fragment 间共享数据。ViewModel 是 <a href=\"https://developer.android.com/topic/libraries/architecture/lifecycle.html\" target=\"_blank\" rel=\"external\">lifecycle library</a> 的一部分。</p>\n<p> <img src=\"https://ws4.sinaimg.cn/large/006tNc79gy1ftr1cilhxqj30d1082aae.jpg\" alt=\"ViewModel with Activity Instance\">。</p>\n<p> 关于这个话题的介绍指南参看 <a href=\"https://developer.android.com/topic/libraries/architecture/viewmodel.html\" target=\"_blank\" rel=\"external\">ViewModel</a>。</p>\n<h4 id=\"为什么用-ViewModel？\"><a href=\"#为什么用-ViewModel？\" class=\"headerlink\" title=\"为什么用 ViewModel？\"></a>为什么用 ViewModel？</h4><p>一个 <code>ViewModel</code> 以具有生命周期意识的方式持有你应用程序 UI 上的数据，并在配置更改后继续存在。它从 <code>Activity</code> 和 <code>Fragment</code> 上分离了 UI 数据，使你更好的遵守单一职责原则：你的 activities 和 fragments 的责任在于将数据绘制于屏幕上，而你的 <code>ViewModel</code>仅持有并处理 UI 上所必须的数据。<br>在 <code>ViewModel</code>中，为将在 UI 上用到或显示的可变的数据使用 <code>LiveData</code>。使用 <code>LiveData</code>有几个好处：</p>\n<ul>\n<li>你能添加一个观察者到数据上（而不是轮训数据的改变），并在数据确实改变时更新 UI。</li>\n<li>仓库和 UI 是完全独立于 <code>ViewModel</code>的。<code>ViewModel</code>中没有调用数据库，使得代码更易于测试。</li>\n</ul>\n<h4 id=\"实现-ViewModel\"><a href=\"#实现-ViewModel\" class=\"headerlink\" title=\"实现 ViewModel\"></a>实现 ViewModel</h4><ol>\n<li>创建一个名为 <code>WordViewModel</code>的类，使他继承自 <code>AndroidViewModel</code>。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WordViewModel</span> <span class=\"keyword\">extends</span> <span class=\"title\">AndroidViewModel</span> </span>&#123;&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li>添加一个私有成员变量来持有对仓库的引用。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> WordRepository mRepository;</div></pre></td></tr></table></figure>\n<ol>\n<li>添加一个私有的 <code>LiveData</code> 成员变量来缓存单词列表。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> LiveData&lt;List&lt;Word&gt;&gt; mAllWords;</div></pre></td></tr></table></figure>\n<ol>\n<li>添加一个构造器来得到一个仓库的引用，并从仓库得到整个单词列表。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">WordViewModel</span> <span class=\"params\">(Application application)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">super</span>(application);</div><div class=\"line\">       mRepository = <span class=\"keyword\">new</span> WordRepository(application);</div><div class=\"line\">       mAllWords = mRepository.getAllWords();</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<ol>\n<li>添加为获得全部单词的一个 “getter” 方法。这对 UI 来说完全的隐藏了实现。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">LiveData&lt;List&lt;Word&gt;&gt; getAllWords() &#123; <span class=\"keyword\">return</span> mAllWords; &#125;</div></pre></td></tr></table></figure>\n<ol>\n<li>为<code>insert()</code>方法创建一层封装，它调用了仓库的 <code>insert()</code>方法。通过这种封装，<code>insert()</code>方法的实现对于 UI 也是完全隐藏的。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(Word word)</span> </span>&#123; mRepository.insert(word); &#125;</div></pre></td></tr></table></figure>\n<p>这里是<code>WordViewModel</code>类的完整代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WordViewModel</span> <span class=\"keyword\">extends</span> <span class=\"title\">AndroidViewModel</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"keyword\">private</span> WordRepository mRepository;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"keyword\">private</span> LiveData&lt;List&lt;Word&gt;&gt; mAllWords;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">WordViewModel</span> <span class=\"params\">(Application application)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">super</span>(application);</div><div class=\"line\">       mRepository = <span class=\"keyword\">new</span> WordRepository(application);</div><div class=\"line\">       mAllWords = mRepository.getAllWords();</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   LiveData&lt;List&lt;Word&gt;&gt; getAllWords() &#123; <span class=\"keyword\">return</span> mAllWords; &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(Word word)</span> </span>&#123; mRepository.insert(word); &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>警告：永远不要让上下文进入<code>ViewModel</code>实例中。不要在 <code>ViewModel</code>中存储 <code>Activity</code>, <code>Fragment</code>, 或者<code>View</code>实例或它们的<code>Context</code>。<br>例如，当设备旋转时，一个 <code>Activity</code>会在<code>ViewModel</code>的生命周期中销毁并创建多次。如果你在 <code>ViewModel</code>中存储了 <code>Activity</code>的引用，你将始终持有本该被销毁的引用。这将导致内存泄漏。<br>如果你需要该应用的上下文，请向本次示例中那样使用 <code>AndroidViewModel</code>。</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>重点：<code>ViewModel</code>没有代替<code>onSaveInstanceState()</code> 方法，因为<code>ViewModel</code>在进程销毁后不在存活。点<a href=\"https://medium.com/google-developers/viewmodels-persistence-onsaveinstancestate-restoring-ui-state-and-loaders-fc7cc4a6c090\" target=\"_blank\" rel=\"external\">这里</a>查看更多。</p>\n</blockquote>\n<hr>\n<p>点这里查看有关 <a href=\"https://www.youtube.com/watch?v=c9-057jC1ZA\" target=\"_blank\" rel=\"external\">ViewModel</a> 更多的知识。</p>\n<h3 id=\"10-添加-XML-布局文件\"><a href=\"#10-添加-XML-布局文件\" class=\"headerlink\" title=\"10.  添加 XML 布局文件\"></a>10.  添加 XML 布局文件</h3><p>接下来，你需要为每条列表项（items）和列表添加一个 XML 布局文件。</p>\n<p>该实例假设你能熟练的创建 XML 布局文件，所以我们仅提供代码给你而不必做讲解。</p>\n<p>在 <code>values/styles.xml</code>中为每条列表项添加风格：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- The default font for RecyclerView items is too small.</span></div><div class=\"line\">The margin is a simple delimiter between the words. --&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"word_title\"</span>&gt;</span><span class=\"xml\"></span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:layout_width\"</span>&gt;</span>match_parent<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:layout_height\"</span>&gt;</span>26dp<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:textSize\"</span>&gt;</span>24sp<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:textStyle\"</span>&gt;</span>bold<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:layout_marginBottom\"</span>&gt;</span>6dp<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:paddingLeft\"</span>&gt;</span>8dp<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>添加一个 <code>layout/recyclerview_item.xml</code>布局：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></div><div class=\"line\">    <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span> <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/textView\"</span></div><div class=\"line\">        <span class=\"attr\">style</span>=<span class=\"string\">\"@style/word_title\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:background</span>=<span class=\"string\">\"@android:color/holo_orange_light\"</span> /&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>在 <code>layout/content_main.xml</code>中，替换原有布局元素为 <code>RecyclerView</code>：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.v7.widget.RecyclerView</span></span></div><div class=\"line\">   <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/recyclerview\"</span></div><div class=\"line\">   <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">   <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">   <span class=\"attr\">android:background</span>=<span class=\"string\">\"@android:color/darker_gray\"</span></div><div class=\"line\">   <span class=\"attr\">tools:listitem</span>=<span class=\"string\">\"@layout/recyclerview_item\"</span> /&gt;</div></pre></td></tr></table></figure></p>\n<p>你的浮动操作按钮（FAB）应与可用操作相对应。在 <code>layout/activity_main.xml</code>文件中，给 <code>FloatingActionButton</code>添加 <code>+</code>号图标：</p>\n<ol>\n<li>在 <code>layout/activity_main.xml</code>文件中，选择  <strong>File &gt; New &gt; Vector Asset</strong>。</li>\n<li>选择 <strong>Material Icon</strong>。</li>\n<li>在 <strong>Icon</strong>中点击 Android 机器人图标，然后选择<code>+</code>(“add”) asset。</li>\n<li>改变布局文件代码为：<code>android:src=&quot;@drawable/ic_add_black_24dp</code></li>\n</ol>\n<h3 id=\"11-添加一个-RecyclerView\"><a href=\"#11-添加一个-RecyclerView\" class=\"headerlink\" title=\"11. 添加一个 RecyclerView\"></a>11. 添加一个 RecyclerView</h3><p>你正继续为了在 <code>RecyclerView</code> 中显示数据，比起直接将数据显示到 <code>TextView</code>中，它更好一点。该实例假设你知道<code>RecyclerView</code>，<code>RecyclerView.LayoutManager</code>，<code>RecyclerView.ViewHolder</code>, 和<code>RecyclerView.Adapter</code>如何工作的。</p>\n<p>注意，在 adapter 中的<code>mWords</code>变量用于缓存数据。接下来，你要添加代码使得数据能自动更新。</p>\n<p>也要注意 <code>getItemCount()</code>方法需要优雅地考虑到数据尚未准备好且mWords仍为null的可能性。在更加复杂的应用程序中，你可以为用户显示占位数据或其他有意义的东西。</p>\n<p>添加一个继承自 <code>RecyclerView.Adapter</code>的<code>WordListAdapter</code>类。代码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WordListAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecyclerView</span>.<span class=\"title\">Adapter</span>&lt;<span class=\"title\">WordListAdapter</span>.<span class=\"title\">WordViewHolder</span>&gt; </span>&#123;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WordViewHolder</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecyclerView</span>.<span class=\"title\">ViewHolder</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> TextView wordItemView;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">WordViewHolder</span><span class=\"params\">(View itemView)</span> </span>&#123;</div><div class=\"line\">           <span class=\"keyword\">super</span>(itemView);</div><div class=\"line\">           wordItemView = itemView.findViewById(R.id.textView);</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> LayoutInflater mInflater;</div><div class=\"line\">   <span class=\"keyword\">private</span> List&lt;Word&gt; mWords; <span class=\"comment\">// Cached copy of words</span></div><div class=\"line\"></div><div class=\"line\">   WordListAdapter(Context context) &#123; mInflater = LayoutInflater.from(context); &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> WordViewHolder <span class=\"title\">onCreateViewHolder</span><span class=\"params\">(ViewGroup parent, <span class=\"keyword\">int</span> viewType)</span> </span>&#123;</div><div class=\"line\">       View itemView = mInflater.inflate(R.layout.recyclerview_item, parent, <span class=\"keyword\">false</span>);</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> WordViewHolder(itemView);</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onBindViewHolder</span><span class=\"params\">(WordViewHolder holder, <span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (mWords != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           Word current = mWords.get(position);</div><div class=\"line\">           holder.wordItemView.setText(current.getWord());</div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">           <span class=\"comment\">// Covers the case of data not being ready yet.</span></div><div class=\"line\">           holder.wordItemView.setText(<span class=\"string\">\"No Word\"</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setWords</span><span class=\"params\">(List&lt;Word&gt; words)</span></span>&#123;</div><div class=\"line\">       mWords = words;</div><div class=\"line\">       notifyDataSetChanged();</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">// getItemCount() is called many times, and when it is first called,</span></div><div class=\"line\">   <span class=\"comment\">// mWords has not been updated (means initially, it's null, and we can't return null).</span></div><div class=\"line\">   <span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getItemCount</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (mWords != <span class=\"keyword\">null</span>)</div><div class=\"line\">           <span class=\"keyword\">return</span> mWords.size();</div><div class=\"line\">       <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>添加<code>RecyclerView</code>到 <code>MainActivity</code>的<code>onCreate()</code>方法中。在 <code>onCreate()</code>方法中：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">RecyclerView recyclerView = findViewById(R.id.recyclerview);</div><div class=\"line\"><span class=\"keyword\">final</span> WordListAdapter adapter = <span class=\"keyword\">new</span> WordListAdapter(<span class=\"keyword\">this</span>);</div><div class=\"line\">recyclerView.setAdapter(adapter);</div><div class=\"line\">recyclerView.setLayoutManager(<span class=\"keyword\">new</span> LinearLayoutManager(<span class=\"keyword\">this</span>));</div></pre></td></tr></table></figure></p>\n<p>运行你的应用程序确保一切正常。现在没有任何列表项，因为你还没为 <code>RecyclerView</code>勾住数据，所以应用程序在没有任何列表项时显示灰色的背景。</p>\n<p><img src=\"https://ws4.sinaimg.cn/large/006tNc79gy1ftr3bbp618j30p018gwfi.jpg\" alt=\"Empty RecyclerView\"></p>\n<h3 id=\"12-填充数据库\"><a href=\"#12-填充数据库\" class=\"headerlink\" title=\"12. 填充数据库\"></a>12. 填充数据库</h3><p>数据库中没有数据。你有两种方式添加数据：在打开数据库时添加一些数据和添加一个用于添加单词的 <code>Activity</code>。</p>\n<p>要在应用程序启动时删除所有内容并重新填充数据库，你要创建<a href=\"https://developer.android.com/reference/android/arch/persistence/room/RoomDatabase.Callback.html\" target=\"_blank\" rel=\"external\">RoomDatabase.Callback</a>并覆盖<code>onOpen()</code>。因为你不能在 UI 线程操作 Room 数据库，<code>onOpen()</code>方法创建并执行了一个<code>AsyncTask</code>来为数据库添加内容。</p>\n<p>这些代码是在 <code>WordRoomDatabase</code>类中创建回调：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> RoomDatabase.Callback sRoomDatabaseCallback =</div><div class=\"line\">    <span class=\"keyword\">new</span> RoomDatabase.Callback()&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onOpen</span> <span class=\"params\">(@NonNull SupportSQLiteDatabase db)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onOpen(db);</div><div class=\"line\">       <span class=\"keyword\">new</span> PopulateDbAsync(INSTANCE).execute();</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>下面的代码为 AsyncTask 删除数据库内容，然后用两个单词 “Hello” 和 “World” 重新填充数据库。你可以随意添加更多单词！<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PopulateDbAsync</span> <span class=\"keyword\">extends</span> <span class=\"title\">AsyncTask</span>&lt;<span class=\"title\">Void</span>, <span class=\"title\">Void</span>, <span class=\"title\">Void</span>&gt; </span>&#123;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> WordDao mDao;</div><div class=\"line\"></div><div class=\"line\">   PopulateDbAsync(WordRoomDatabase db) &#123;</div><div class=\"line\">       mDao = db.wordDao();</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">protected</span> Void <span class=\"title\">doInBackground</span><span class=\"params\">(<span class=\"keyword\">final</span> Void... params)</span> </span>&#123;</div><div class=\"line\">       mDao.deleteAll();</div><div class=\"line\">       Word word = <span class=\"keyword\">new</span> Word(<span class=\"string\">\"Hello\"</span>);</div><div class=\"line\">       mDao.insert(word);</div><div class=\"line\">       word = <span class=\"keyword\">new</span> Word(<span class=\"string\">\"World\"</span>);</div><div class=\"line\">       mDao.insert(word);</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>最后，在调用<code>.build()</code>前将回调添加到数据库构建序列。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">.addCallback(sRoomDatabaseCallback)</div></pre></td></tr></table></figure></p>\n<h3 id=\"13-添加-NewWordActivity\"><a href=\"#13-添加-NewWordActivity\" class=\"headerlink\" title=\"13. 添加 NewWordActivity\"></a>13. 添加 NewWordActivity</h3><p>添加字符串资源到 <code>values/strings.xml</code>：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hint_word\"</span>&gt;</span>Word...<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"button_save\"</span>&gt;</span>Save<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"empty_not_saved\"</span>&gt;</span>Word not saved because it is empty.<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>添加颜色资源到 <code>value/colors.xml</code>：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">color</span> <span class=\"attr\">name</span>=<span class=\"string\">\"buttonLabel\"</span>&gt;</span>#d3d3d3<span class=\"tag\">&lt;/<span class=\"name\">color</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>添加尺寸资源到 <code>values/dimens.xml</code>：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dimen</span> <span class=\"attr\">name</span>=<span class=\"string\">\"small_padding\"</span>&gt;</span>6dp<span class=\"tag\">&lt;/<span class=\"name\">dimen</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dimen</span> <span class=\"attr\">name</span>=<span class=\"string\">\"big_padding\"</span>&gt;</span>16dp<span class=\"tag\">&lt;/<span class=\"name\">dimen</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>创建一个 <code>activity_new_word.xml</code>文件到布局文件夹：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></div><div class=\"line\">   <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span> <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">   <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">EditText</span></span></div><div class=\"line\">       <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/edit_word\"</span></div><div class=\"line\">       <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">       <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">       <span class=\"attr\">android:fontFamily</span>=<span class=\"string\">\"sans-serif-light\"</span></div><div class=\"line\">       <span class=\"attr\">android:hint</span>=<span class=\"string\">\"@string/hint_word\"</span></div><div class=\"line\">       <span class=\"attr\">android:inputType</span>=<span class=\"string\">\"textAutoComplete\"</span></div><div class=\"line\">       <span class=\"attr\">android:padding</span>=<span class=\"string\">\"@dimen/small_padding\"</span></div><div class=\"line\">       <span class=\"attr\">android:layout_marginBottom</span>=<span class=\"string\">\"@dimen/big_padding\"</span></div><div class=\"line\">       <span class=\"attr\">android:layout_marginTop</span>=<span class=\"string\">\"@dimen/big_padding\"</span></div><div class=\"line\">       <span class=\"attr\">android:textSize</span>=<span class=\"string\">\"18sp\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">Button</span></span></div><div class=\"line\">       <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/button_save\"</span></div><div class=\"line\">       <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">       <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">       <span class=\"attr\">android:background</span>=<span class=\"string\">\"@color/colorPrimary\"</span></div><div class=\"line\">       <span class=\"attr\">android:text</span>=<span class=\"string\">\"@string/button_save\"</span></div><div class=\"line\">       <span class=\"attr\">android:textColor</span>=<span class=\"string\">\"@color/buttonLabel\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>用一个空的 Activity 模版来创建一个新的 Activity，<code>NewWordActivity</code>。验证这个 activity 已经被添加到 Android Manifest 中！<br><code>&lt;activity android:name=&quot;.NewWordActivity&quot;&gt;&lt;/activity&gt;</code><br>这里是该 activity 的代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NewWordActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String EXTRA_REPLY = <span class=\"string\">\"com.example.android.wordlistsql.REPLY\"</span>;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"keyword\">private</span>  EditText mEditWordView;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">       setContentView(R.layout.activity_new_word);</div><div class=\"line\">       mEditWordView = findViewById(R.id.edit_word);</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">final</span> Button button = findViewById(R.id.button_save);</div><div class=\"line\">       button.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">               Intent replyIntent = <span class=\"keyword\">new</span> Intent();</div><div class=\"line\">               <span class=\"keyword\">if</span> (TextUtils.isEmpty(mEditWordView.getText())) &#123;</div><div class=\"line\">                   setResult(RESULT_CANCELED, replyIntent);</div><div class=\"line\">               &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                   String word = mEditWordView.getText().toString();</div><div class=\"line\">                   replyIntent.putExtra(EXTRA_REPLY, word);</div><div class=\"line\">                   setResult(RESULT_OK, replyIntent);</div><div class=\"line\">               &#125;</div><div class=\"line\">               finish();</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;);</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"14-连接数据\"><a href=\"#14-连接数据\" class=\"headerlink\" title=\"14. 连接数据\"></a>14. 连接数据</h3><p>最后一步是通过保存用户输入的新单词并显示当前的单词数据库内容到 <code>RecyclerView</code>上来连接 UI 和 数据库。</p>\n<p>要显示数据库的当前内容，需要添加一个观察者，该观察者在 <code>ViewModel</code> 中观察<code>LiveData</code>。无论数据何时改变，<code>onChanged()</code>回调将被唤起，它将调用适配器的 <code>setWord()</code> 方法来更新适配器缓存的数据并刷新显示的列表。</p>\n<p>在 <code>MainActivity</code>中，为 <code>ViewModel</code>创建一个成员变量：<br><code>private WordViewModel mWordViewModel;</code><br>使用 <a href=\"https://developer.android.com/reference/android/arch/lifecycle/ViewModelProviders.html\" target=\"_blank\" rel=\"external\">ViewModelProviders</a> 来关联你的 <code>ViewModel</code> 和你的 UI 控制器。当你的应用程序第一次启动，<code>ViewModelProviders</code>将创建<code>ViewModel</code>。当 Activity 销毁，例如配置改变时，<code>ViewModel</code>任然存在。当 Activity 重新创建时，<code>ViewModelProviders</code>返回这个已经存在的 <code>ViewModel</code>。详见 <a href=\"https://developer.android.com/topic/libraries/architecture/viewmodel.html\" target=\"_blank\" rel=\"external\">ViewModel</a>。</p>\n<p>在 <code>onCreate()</code>中，从<code>ViewModelProvider</code>中获取<code>ViewModel</code>。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mWordViewModel = ViewModelProviders.of(<span class=\"keyword\">this</span>).get(WordViewModel.class);</div></pre></td></tr></table></figure></p>\n<p>同样在<code>onCreate()</code>中，为返回<code>getAllWords()</code>给<code>LiveData</code>添加一个观察者。<code>onChanged()</code>方法在被观察的数据改变并且 Activity 在前台时调用。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">mWordViewModel.getAllWords().observe(<span class=\"keyword\">this</span>, <span class=\"keyword\">new</span> Observer&lt;List&lt;Word&gt;&gt;() &#123;</div><div class=\"line\">   <span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onChanged</span><span class=\"params\">(@Nullable <span class=\"keyword\">final</span> List&lt;Word&gt; words)</span> </span>&#123;</div><div class=\"line\">       <span class=\"comment\">// Update the cached copy of the words in the adapter.</span></div><div class=\"line\">       adapter.setWords(words);</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>在 <code>MainActivity</code>中，为<code>NewWordActivity</code>添加 <code>onActivityResult()</code>方法。</p>\n<p>如果 Activity 返回 <code>RESULT_OK</code>，通过调用 <code>WordViewModel</code>的<code>insert()</code>方法将返回的单词插入到数据库中。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityResult</span><span class=\"params\">(<span class=\"keyword\">int</span> requestCode, <span class=\"keyword\">int</span> resultCode, Intent data)</span> </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">super</span>.onActivityResult(requestCode, resultCode, data);</div><div class=\"line\"></div><div class=\"line\">   <span class=\"keyword\">if</span> (requestCode == NEW_WORD_ACTIVITY_REQUEST_CODE &amp;&amp; resultCode == RESULT_OK) &#123;</div><div class=\"line\">       Word word = <span class=\"keyword\">new</span> Word(data.getStringExtra(NewWordActivity.EXTRA_REPLY));</div><div class=\"line\">       mWordViewModel.insert(word);</div><div class=\"line\">   &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">       Toast.makeText(</div><div class=\"line\">               getApplicationContext(),</div><div class=\"line\">               R.string.empty_not_saved,</div><div class=\"line\">               Toast.LENGTH_LONG).show();</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>定义上面代码中缺失的请求码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> NEW_WORD_ACTIVITY_REQUEST_CODE = <span class=\"number\">1</span>;</div></pre></td></tr></table></figure></p>\n<p>当用户点击 FAB 时，在 <code>MainActivity</code> 中启动<code>NewWordActivity</code>。处理这次 FABB 点击事件的代码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Intent intent = <span class=\"keyword\">new</span> Intent(MainActivity.<span class=\"keyword\">this</span>, NewWordActivity.class);</div><div class=\"line\">startActivityForResult(intent, NEW_WORD_ACTIVITY_REQUEST_CODE);</div></pre></td></tr></table></figure></p>\n<p>运行你的程序吧！！！<br>当你在 <code>NewWordActivity</code>中添加新的单词时，UI 将会自动更新。</p>\n<h3 id=\"15-总结\"><a href=\"#15-总结\" class=\"headerlink\" title=\"15. 总结\"></a>15. 总结</h3><p><img src=\"https://ws3.sinaimg.cn/large/006tNc79gy1ftr4rou9tfj30fi0cqaaw.jpg\" alt=\"Room with UI\"></p>\n<p>既然你有一个可用的应用程序，让我们回顾一下你构建的内容吧。从一开始讲起，这又回到了应用程序结构。</p>\n<p>你有一个用于显示列表中的单词的应用程序（<code>MainActivity</code>，<code>RecyclerView</code>，<code>WordListAdapter</code>）。</p>\n<p>您可以添加单词到列表中（<code>NewWordActivity</code>）。</p>\n<p>单词是Word实体类的实例。</p>\n<p>这些单词作为单词列表（<code>mWords</code>）被缓存在<code>RecyclerViewAdapter</code>中。 当数据库中的单词发生改变时，该单词列表会自动更新并重新显示。</p>\n<h4 id=\"自更新-UI-的数据流（响应式-UI）\"><a href=\"#自更新-UI-的数据流（响应式-UI）\" class=\"headerlink\" title=\"自更新 UI 的数据流（响应式 UI）\"></a>自更新 UI 的数据流（响应式 UI）</h4><p>因为我们使用了 <code>LiveData</code>使得自动更新成为可能。在 <code>MainActivity</code>中，有一个观察者，它从数据库中观察单词的<code>LiveData</code>，并在它们变化时收到通知。当有变化发生，观察者的 <code>onChange</code>方法将被执行并更新<code>WordListAdaptre</code>中的 <code>mWords</code>。</p>\n<p>这些数据是可观察的，因为它是 <code>LiveData</code>。观察到的是 <code>LiveData&lt;List&lt;Word&gt;&gt;</code>，它通过 <code>WordViewModel</code>对象的<code>getAllWords()</code>方法返回。</p>\n<p><code>WordVieModel</code> 隐藏了 UI 层背后的所有实现。它提供了访问数据层的方法，并返回 <code>LiveData</code> 使得 <code>MainActivity</code> 能设置观察者关系。<code>Views</code>和<code>Activities</code>（以及<code>Fragments</code>）仅通过<code>ViewModel</code>于数据相交互。因此，数据从哪来的对它是无关紧要的。</p>\n<p>在这个例子中，数据来自<code>Repository</code>。<code>ViewModel</code>不必知道仓库和什么交互。它仅需要知道怎样域仓库交互<code>Repository</code>，那是通过<code>Repository</code> 暴露的方法来完成的。</p>\n<p>仓库管理着一个或多个数据源。在<code>WordLstSample</code>应用程序中，后端是一个 Room 数据库。Room 是一个包装器并实现了一个 SQLite 数据库。Room 为你做了许多之前你不得不自己做的工作。例如，Room 能执行你以前使用 SQLiteOpenHelper 类所做的所有操作。</p>\n<p>数据库操作时调用的 DAO 映射方法，使你在调用仓库的方法（例如：<code>getAllWords()</code>）时，Room 能执行 <code>SELECT * from word_table ORDER BY word ASC</code>。</p>\n<p>因为返回查询的结果是被观察的 <code>LiveData</code>类型，每次在 Room 中改变的数据，<code>Observer</code> 接口的 <code>onChanged()</code> 方法会被执行并更新 UI。</p>\n"},{"title":"LeetCode Note","url":"http://thirtyyuan.github.io/2018/01/27/LeetCode/","content":"<p>Just for help me found the solution of Algorithm more fast and make some note. If it’s helpful to you, that’s my pleasure.<a id=\"more\"></a> </p>\n<h2 id=\"Binary-Tree\"><a href=\"#Binary-Tree\" class=\"headerlink\" title=\"Binary Tree\"></a>Binary Tree</h2><h3 id=\"Flatten-Binary-Tree-to-Linked-List\"><a href=\"#Flatten-Binary-Tree-to-Linked-List\" class=\"headerlink\" title=\"Flatten Binary Tree to Linked List\"></a>Flatten Binary Tree to Linked List</h3><h4 id=\"post-order-traversal\"><a href=\"#post-order-traversal\" class=\"headerlink\" title=\"post-order traversal\"></a>post-order traversal</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</div><div class=\"line\">    </div><div class=\"line\">    TreeNode pre;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">flatten</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// write your code here</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(root == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        flatten(root.right);</div><div class=\"line\">        flatten(root.left);</div><div class=\"line\">        root.right = pre;</div><div class=\"line\">        root.left = <span class=\"keyword\">null</span>;</div><div class=\"line\">        pre = root;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"title":"Android踩坑笔记","url":"http://thirtyyuan.github.io/2017/06/02/Android踩坑笔记/","content":"<pre><code>此篇仅为自己记录下日常开发中所遇到的问题及部分解决方法，若有人能从中受益自然更好。 \n</code></pre><h2 id=\"adb-系列\"><a href=\"#adb-系列\" class=\"headerlink\" title=\"adb 系列\"></a>adb 系列</h2><h3 id=\"adb-can’t-ack\"><a href=\"#adb-can’t-ack\" class=\"headerlink\" title=\"adb can’t ack\"></a>adb can’t ack</h3><p>问题描述：启动 android studio 时报错：“adb can’t ack”：</p>\n<p>解决方法：关闭 as 和 genymotion，先启动 as，完成后再启动 genymotion。</p>\n<h3 id=\"‘adb-exe-start-server’-failed\"><a href=\"#‘adb-exe-start-server’-failed\" class=\"headerlink\" title=\"‘adb.exe,start-server’ failed\"></a>‘adb.exe,start-server’ failed</h3><p>问题描述：’adb.exe,start-server’ failed — run manually if necessary</p>\n<p>解决方法：“tools” —&gt; “android” —&gt; “enable add integration”</p>\n<h3 id=\"commond-not-found-adb\"><a href=\"#commond-not-found-adb\" class=\"headerlink\" title=\"commond not found adb\"></a>commond not found adb</h3><p>问题描述：终端运行 adb 命令时提示 <code>commond not found adb</code></p>\n<p>解决方法：</p>\n<blockquote>\n<ol>\n<li>启动终端。</li>\n<li>进入当前用户的 home 目录。<br> 在命令行输入 <code>echo $HOME</code></li>\n<li>创建 .bash_profile 文件。<br> 命令行输入 <code>touch .bash_profile</code></li>\n<li>打开 .bash_profile 文件。<br> 命令行输入<code>open -e .bash_profile</code> 此命令行输入完毕后，会自动弹出 .bash_profile 文件的编辑窗口<br> 在.bash_profile 文件中输入 <code>export PATH=/Users/您的用户名/文件路径/platform-tools/:$PATH</code><br> 注意：如果需要添加多个路径到PATH下时，需要用“:”(英文的冒号)隔开。因为android和adb这些命令        是在不同的文件夹中的，格式是：PATH=${PATH}:路径1:路径2、另外，如果指定多个路径，结尾就不用    写:$PATH了。例如：<br> <code>export PATH=${PATH}:/Users/ShaneChen/Documents/android-sdk-macosx/platform-tools:/Users/    ShaneChen/Documents/android-sdk-macosx/tools</code></li>\n<li>保存文件。<br> 直接关闭 .bash_profile 文件，即可自动保存您输入的内容。 </li>\n<li>更新刚配置的环境变量<br> 在命令行中输入 <code>source .bash_profile</code>，<strong>注意：以后再出现该错误提示，只需直接执行本句即可</strong></li>\n<li>验证配置是否成功<br> 终端输入 <code>adb</code>，如果没有出现<code>adb: command not found</code>,而是出现 adb 的命令参数解释。则表明环境变量配置成功。</li>\n</ol>\n</blockquote>\n<h2 id=\"Manifest-系列\"><a href=\"#Manifest-系列\" class=\"headerlink\" title=\"Manifest 系列\"></a>Manifest 系列</h2><h3 id=\"requestWindowFeature-Window-FEATURE-NO-TITLE\"><a href=\"#requestWindowFeature-Window-FEATURE-NO-TITLE\" class=\"headerlink\" title=\"requestWindowFeature(Window.FEATURE_NO_TITLE)\"></a>requestWindowFeature(Window.FEATURE_NO_TITLE)</h3><p>问题描述：main activity 中 “requestWindowFeature(Window.FEATURE_NO_TITLE);”不能生效，改动 manifest 文件中“android：theme”导致程序崩溃</p>\n<p>解决方法：as在创建 “ empty activity ” 时，会默认 “ MainActivity ” 继承自 “AppCompatActivity”, 改为“Activity即可”。</p>\n<h2 id=\"Android-新特性\"><a href=\"#Android-新特性\" class=\"headerlink\" title=\"Android 新特性\"></a>Android 新特性</h2><h3 id=\"运行时权限\"><a href=\"#运行时权限\" class=\"headerlink\" title=\"运行时权限\"></a>运行时权限</h3><p>详见<a href=\"https://thirtyyuan.github.io/2016/07/29/Android-6-0-Permission/#more\">「Android 6.0 Permission」</a>,包括多权限申请、权限解释弹窗、特殊权限申请。</p>\n<h3 id=\"FloatingActionButton-隐藏与显示\"><a href=\"#FloatingActionButton-隐藏与显示\" class=\"headerlink\" title=\"FloatingActionButton 隐藏与显示\"></a>FloatingActionButton 隐藏与显示</h3><p>问题描述：为了使其在用户上滑滚动列表时自动隐藏，下滑列表时显示。</p>\n<p>解决方法：自定义类继承 CoordinatorLayout.Behavior，并泛型成 FloatingActionButton，复写 onNestedScroll( ) 或 onNestedScroll( ) 方法，后者滚动时反应较快，推荐使用后者。<br>具体代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class FloatingActionButtonScrollBehavior extends CoordinatorLayout.Behavior&lt;FloatingActionButton&gt; &#123;</div><div class=\"line\"></div><div class=\"line\">    public FloatingActionButtonScrollBehavior(Context context, AttributeSet attrs) &#123;</div><div class=\"line\">        super();</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">//    停止滑动时调用</div><div class=\"line\">    @Override</div><div class=\"line\">    public void onStopNestedScroll(CoordinatorLayout coordinatorLayout, final FloatingActionButton child, View target) &#123;</div><div class=\"line\">        super.onStopNestedScroll(coordinatorLayout, child, target);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">//    滑动时有延迟，不推荐使用</div><div class=\"line\">//    @Override</div><div class=\"line\">//    public void onNestedScroll(CoordinatorLayout coordinatorLayout, FloatingActionButton child, View target, int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed) &#123;</div><div class=\"line\">//        //child -&gt; Floating Action Button</div><div class=\"line\">//        if (dyConsumed &gt; 0) &#123;</div><div class=\"line\">//            Log.d(&quot;Scrolling&quot;,&quot;Up&quot;);</div><div class=\"line\">//            CoordinatorLayout.LayoutParams layoutParams = (CoordinatorLayout.LayoutParams) child.getLayoutParams();</div><div class=\"line\">//            int fab_bottomMargin = layoutParams.bottomMargin;</div><div class=\"line\">//            child.animate().translationY(child.getHeight() + fab_bottomMargin).setInterpolator(new LinearInterpolator()).start();</div><div class=\"line\">//        &#125; else if (dyConsumed &lt; 0) &#123;</div><div class=\"line\">//            Log.d(&quot;Scrolling&quot;,&quot;down&quot;);</div><div class=\"line\">//            child.animate().translationY(0).setInterpolator(new LinearInterpolator()).start();</div><div class=\"line\">//        &#125;</div><div class=\"line\">//    &#125;</div><div class=\"line\"></div><div class=\"line\">//    滑动时延迟小，推荐使用</div><div class=\"line\">    @Override</div><div class=\"line\">    public void onNestedPreScroll (CoordinatorLayout coordinatorLayout, FloatingActionButton child, View target, int dx, int dy, int[] consumed) &#123;</div><div class=\"line\">        //child -&gt; Floating Action Button</div><div class=\"line\">        if (dy &gt; 0) &#123;</div><div class=\"line\">            Log.d(&quot;Scrolling&quot;,&quot;Up&quot;);</div><div class=\"line\">            CoordinatorLayout.LayoutParams layoutParams = (CoordinatorLayout.LayoutParams) child.getLayoutParams();</div><div class=\"line\">            int fab_bottomMargin = layoutParams.bottomMargin;</div><div class=\"line\">            child.animate().translationY(child.getHeight() + fab_bottomMargin).setInterpolator(new LinearInterpolator()).start();</div><div class=\"line\">        &#125; else if (dy &lt; 0) &#123;</div><div class=\"line\">            Log.d(&quot;Scrolling&quot;,&quot;down&quot;);</div><div class=\"line\">            child.animate().translationY(0).setInterpolator(new LinearInterpolator()).start();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">//    开始滑动时调用</div><div class=\"line\">    @Override</div><div class=\"line\">    public boolean onStartNestedScroll(CoordinatorLayout coordinatorLayout, FloatingActionButton child, View directTargetChild, View target, int nestedScrollAxes) &#123;</div><div class=\"line\">        return nestedScrollAxes == ViewCompat.SCROLL_AXIS_VERTICAL;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>最后在带有 FloatingActionButton 的 xml 文件中配置中做如下配置：</p>\n<ol>\n<li>总布局中添加<code>xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</code></li>\n<li>FloatingActionButton 组件属性中添加 <code>app:layout_behavior=&quot;your.packagename.FloatingActionButtonScrollBehavior&quot;</code>,包名部分更改为自己包名即可。</li>\n</ol>\n<p>参考资料：Android 官方文档：<a href=\"https://developer.android.google.cn/reference/android/support/design/widget/CoordinatorLayout.Behavior.html#onNestedPreScroll(android.support.design.widget.CoordinatorLayout,%20V,%20android.view.View,%20int,%20int,%20int[]\" target=\"_blank\" rel=\"external\">「CoordinatorLayout.Behavior」</a>)；Stackoverflow 的问答<a href=\"https://stackoverflow.com/questions/31617398/floatingactionbutton-hide-on-list-scroll\" target=\"_blank\" rel=\"external\">「floatingactionbutton-hide-on-list-scroll」</a>；</p>\n<h3 id=\"FloatingActionButton-资源引用错误\"><a href=\"#FloatingActionButton-资源引用错误\" class=\"headerlink\" title=\"FloatingActionButton 资源引用错误\"></a>FloatingActionButton 资源引用错误</h3><p>问题描述：InflateException: Binary XML file line #0: Binary XML file line #0: Error inflating class android.support.design.widget.FloatingActionButton<br>解决方法：千万注意 XML 文件中一些特性是 app 开头 app:backgroundTint=”@color/colorPrimary”、app:elevation=”8dp”、app:srcCompat=”@drawable/xxx”，其次注意检查 drawable 文件目录后缀，放在最基本的 drawable 包中，不要放在带 v-24 等版本文件中，否则在低版本中找不到</p>\n<h3 id=\"打开新页面后，旧页面的-RecyclerView-自己向下滚动\"><a href=\"#打开新页面后，旧页面的-RecyclerView-自己向下滚动\" class=\"headerlink\" title=\"打开新页面后，旧页面的 RecyclerView 自己向下滚动\"></a>打开新页面后，旧页面的 RecyclerView 自己向下滚动</h3><p>问题描述：在 NestedScrollView 内部有 RecyclerView 的页面，点击打开新 Activity 回到 RecyclerView 会向下滚动<br>问题原因：RecyclerView 重新创建时会抢视图焦点，造成 RecyclerView 自动下滑的现象<br>解决方法：RecyclerView 的父布局中添加属性 android:descendantFocusability=”blocksDescendants”</p>\n<h2 id=\"View-相关\"><a href=\"#View-相关\" class=\"headerlink\" title=\"View 相关\"></a>View 相关</h2><h3 id=\"ViewAnimation-中心点坐标\"><a href=\"#ViewAnimation-中心点坐标\" class=\"headerlink\" title=\"ViewAnimation 中心点坐标\"></a>ViewAnimation 中心点坐标</h3><p>问题描述：使用 ViewAnimation 做视图动画时的中心点设置有点特殊，可用百分号值和浮点值，如 “50%（p）”、“0.5（动态设置要加f）”。</p>\n<p>解决方法：其中，百分号值是针对布局元素本身的大小设置，如 50% 正好是布局元素的中点；浮点值则是以布局元素左上角为基准点，移动浮点值个像素值来确定中心点。</p>\n<h3 id=\"View-的-setVisible-因线程切换延迟执行\"><a href=\"#View-的-setVisible-因线程切换延迟执行\" class=\"headerlink\" title=\"View 的 setVisible() 因线程切换延迟执行\"></a>View 的 setVisible() 因线程切换延迟执行</h3><p>问题描述：在父布局的 ViewBehavior 或自定义视图中，因 Rx 切换到了计算线程，导致本应该和父 View 同时执行的 setVisible() 因为父布局线程切到了计算线程而无法立即执行；<br>解决办法：Rx 切到计算线程的代码用 Rx 主线程代码包裹起来，让其不影响父布局的线程。</p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><h3 id=\"读写外部存储权限（未解决）\"><a href=\"#读写外部存储权限（未解决）\" class=\"headerlink\" title=\"读写外部存储权限（未解决）\"></a>读写外部存储权限（未解决）</h3><p>问题描述：一加手机应用权限管理中找不到这两个权限，程序中注册权限时，运行已授予权限后的代码（但没有提示用户授予运行时权限），使用内部文件管理器不可以选取文件（如：图片显示为灰色，不可选取），但使用第三方文件管理器可以选取文件。</p>\n"},{"title":"Nice to meet you","url":"http://thirtyyuan.github.io/2016/10/30/Nice_to_meet_you/","content":"<p>由于之前博客的主题对代码块的支持不好，而对代码块支持较好的几个主题的一些功能又不满意，因此一直没换，直到看医生的「android 群英传：神兵利器」时才想到去 <a href=\"https://hexo.io/zh-cn\" target=\"_blank\" rel=\"external\">Hexo 官网</a>「Hexo」看下主题，结果就物色到了这款让我超喜欢的主题。刚开始只是因为黑色背景的炫酷和对代码块的支持很好而用它，结果发现它可没那么简单！<br><a id=\"more\"></a></p>\n<h3 id=\"惊艳一\"><a href=\"#惊艳一\" class=\"headerlink\" title=\"惊艳一\"></a>惊艳一</h3><p>主题的黑色背景与标签、阅读原文、社交链接的颜色高度协调，简直就是平时写代码时的 IDE 和各种强大的文本编辑器的变种，看上去就很有范有没有！再看细节，每篇文章的简介部分都是浮起来的，文章分割得既清晰又使得每个块在进入页面时的动画有序的串联起来，虽然别的主题也有类似的设计，但是配上酷炫的背景和标签，很 material design 吧！不信你在首页下拉到下面看看动画 :P<br><img src=\"http://ww4.sinaimg.cn/large/006y8mN6jw1f9ae1b0u1ej31kw0zk0zt.jpg\" alt=\"backgroundOfBlog\"></p>\n<h3 id=\"惊艳二\"><a href=\"#惊艳二\" class=\"headerlink\" title=\"惊艳二\"></a>惊艳二</h3><p>神奇的菜单键！之前一直觉得「标签」、「友情链接」、「关于我」这些小东西没必要单独放一个页面来展示，但是又不会前端，只能接受那种设计（或者全部放一页里面？有点乱吧）。直到遇到这个主题，解决了我长久以来的痛点。<br><img src=\"http://ww1.sinaimg.cn/large/006y8mN6jw1f9aertfr5xj30fi0a6dgf.jpg\" alt=\"menu\"></p>\n<h3 id=\"惊艳三\"><a href=\"#惊艳三\" class=\"headerlink\" title=\"惊艳三\"></a>惊艳三</h3><p>每篇文章都点页面右下角的「去到底部」按钮看看有什么？<br><img src=\"http://ww3.sinaimg.cn/large/006y8mN6jw1f9af8v2ecuj318s09yjtc.jpg\" alt=\"rights\"><br>厉害了 word哥！在这个文章版权被忽略，一篇文章可以搜出十个作者的年代，简直让写文章的人们看到了福音！虽然文章内容还是随意复制，但最起码给看到的人们提醒了版权的小事，这就是我最感谢主题作者「luuman」的地方。</p>\n<h3 id=\"惊艳四\"><a href=\"#惊艳四\" class=\"headerlink\" title=\"惊艳四\"></a>惊艳四</h3><p><img src=\"http://ww2.sinaimg.cn/large/006y8mN6jw1f9afgqcbijj30lo03wwei.jpg\" alt=\"shareMenu\"><br>定睛一看，这是什么？广告吗？我要点进去看看博主都收了什么好处，然后举报！<br><img src=\"http://ww2.sinaimg.cn/large/006y8mN6jw1f9ah207naaj30o40ruac8.jpg\" alt=\"share\"><br>不对啊，居然这么贴心的准备了分享博客的功能！以后我写的好你们想分享就方便多了是吧😁之前一直想接入分享功能，但是难度太大最终放弃了，再次感谢主题作者「luuman」解决了业余人员的痛点🙏</p>\n<h3 id=\"惊艳五\"><a href=\"#惊艳五\" class=\"headerlink\" title=\"惊艳五\"></a>惊艳五</h3><p>我一直觉得读者想看一篇文章，就要充分展现出文章本身，包括正文和目录，其他的一切都是次要的，不应该直接展示出来影响阅读体验；但有时读者又想很快的跳转到自己感兴趣的内容，所以还是要留出快速跳转到相应内容的机会。所以，应该由读者自己决定是否显示标签、文章列表等信息，于是看文章的左下角：<br><img src=\"http://ww1.sinaimg.cn/large/006y8mN6jw1f9afx8y5nej30z611sq5b.jpg\" alt=\"ArtiscleList\"><br>嗯，简直太贴心了。当然还有引导页、进度条等插件的配置也是超级方便，主要是主题作者的博客里有详细的指导。</p>\n<p>以此纪念我的博客重获新生，并向主题作者<a href=\"http://luuman.github.io\" target=\"_blank\" rel=\"external\">luuman</a>表示感谢！</p>\n<h3 id=\"题外话\"><a href=\"#题外话\" class=\"headerlink\" title=\"题外话\"></a>题外话</h3><ol>\n<li>最近有时间时不学习，没时间时更没法学，导致许久没出博文，而且算法类的博文不大好写，还是潜心学习吧。</li>\n<li>终于刷机成功了，用上了 CyanogenMod OS 的系统，既有原生安卓的 feel 又没了 Google 服务的耗电，不过失去了 Google 服务的安卓用起来还真不顺手，需要的可以刷一个，另外觉得自己手机卡顿的，这里提供几个不同系统的 ROM，觉得不好用了再刷其他的也不迟。（刷机有风险，刷之前记得备份！！！推荐「QQ同步助手」）</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>系统名</th>\n<th>官网地址</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CyanogenMod</td>\n<td><a href=\"http://download.cyanogenmod.org/?device=&amp;type=experimental\" target=\"_blank\" rel=\"external\">CynogenModOS Download</a></td>\n</tr>\n<tr>\n<td>YunOS</td>\n<td><a href=\"http://www.yunos.com/rom?spm=a2c01.7617293.header.12.rguwKO\" target=\"_blank\" rel=\"external\">YunOS Download</a></td>\n</tr>\n<tr>\n<td>Flyme</td>\n<td><a href=\"http://www.flyme.cn/firmwarelist-53.html#8\" target=\"_blank\" rel=\"external\">Flyme Download</a></td>\n</tr>\n<tr>\n<td>MIUI</td>\n<td><a href=\"http://www.miui.com/download.html\" target=\"_blank\" rel=\"external\">MIUI Download</a></td>\n</tr>\n</tbody>\n</table>\n"},{"title":"Android 6.0 Permission","url":"http://thirtyyuan.github.io/2016/07/29/Android-6-0-Permission/","content":"<h2 id=\"为什么写这篇文章\"><a href=\"#为什么写这篇文章\" class=\"headerlink\" title=\"为什么写这篇文章\"></a>为什么写这篇文章</h2><p>今天总算是到达了会用 runtime permission 的阶段了，之前我是很惧怕需要用到 runtime permission 的，因为尝试了几次都以失败告终，网上大部分教程都深涩难懂，甚至中文比英文难懂。<a id=\"more\"></a>但是因为权限问题而不能真机调试，真的很痛苦，今天正好解决了这个小问题，于是打算从新手（我）的角度写篇文章总结下，帮助大家尽快学会 runtime permission 的使用。</p>\n<h2 id=\"什么是-runtime-permission\"><a href=\"#什么是-runtime-permission\" class=\"headerlink\" title=\"什么是 runtime permission\"></a>什么是 runtime permission</h2><p>官方文档解释：「从 android 6.0 开始，用户授予应用的权限不是在安装应用时授予，而是在应用运行时，需要用到该权限时授予」，如下图:<br><img src=\"http://ww1.sinaimg.cn/large/006tNbRwgw1f6at9zc0otj30qo0fkabo.jpg\" alt=\"android 权限授予差别\"><br>简单的说，应用所需要的权限授予不再是流氓的让用户在安装应用时全盘接受，否则无法安装该应用，而是在用户使用该应用的某项功能时，明显的弹窗询问用户是否允许应用获取该功能所需要的权限。总之，它是为了让 android 6.0 以上的系统更安全而生的。</p>\n<h2 id=\"为什么要会用-runtime-permission\"><a href=\"#为什么要会用-runtime-permission\" class=\"headerlink\" title=\"为什么要会用 runtime permission\"></a>为什么要会用 runtime permission</h2><ol>\n<li>作为开发者，应该尽可能为用户着想，给用户最安全、最舒适的体验，因此我们应该避免流氓的让用户在安装应用时必须同意，否则不给用户使用应用；</li>\n<li>不使用 runtime permission 的应用有极大可能在使用需要权限的功能时引起应用奔溃。具体原因（见文末第二个参考链接）不再分析，总之请尽快学习使用 runtime permission ，为你的职业操守和情怀加分，不将就！</li>\n</ol>\n<h2 id=\"实现思路分析\"><a href=\"#实现思路分析\" class=\"headerlink\" title=\"实现思路分析\"></a>实现思路分析</h2><p>这里以获取定位权限后进行定位操作为例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> MainActivity extands Activity &#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//自定义权限请求码，以便于后面对请求码对应的权限作出反应</span></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> LOCATION_REQUEST_CODE = <span class=\"number\">7</span> ;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">\t\tsetContentView(R.layout.activity_main)</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (SDKVersion &lt; <span class=\"number\">23</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">//直接进行权限已经被授予后的操作，如；</span></div><div class=\"line\">\t\t\tlocationProvider();</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">//检查权限是否已经授予</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (granted) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">//进行权限已被授予后的操作，如；</span></div><div class=\"line\">\t\t\t\tlocationProvider();</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">//请求授予权限</span></div><div class=\"line\">\t\t\t\trequestPermission(...);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>无论权限被同意还是拒绝，系统都会回调这个方法,有必要的话可以用它来通知用户权限授予的结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> MainActivity extands Activity &#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//上面代码相同，省略</span></div><div class=\"line\">\t...</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onRequestPermissionsResult</span><span class=\"params\">(<span class=\"keyword\">int</span> requestCode, String[] permissions, <span class=\"keyword\">int</span>[] grantResults)</span> </span>&#123;</div><div class=\"line\">    \t<span class=\"keyword\">switch</span> (requestCode) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">case</span> LOCATION_REQUEST_CODE:</div><div class=\"line\">    \t    \t<span class=\"comment\">//如果权限请求被拒绝，则 grantResults 通常为空</span></div><div class=\"line\">    \t        <span class=\"keyword\">if</span> (grantResults[<span class=\"number\">0</span>] == PackageManager.PERMISSION_GRANTED) &#123;</div><div class=\"line\">   \t             \t<span class=\"comment\">// 进行权限已被授予后的操作，如：</span></div><div class=\"line\">   \t            \t locationProvider();</div><div class=\"line\">   \t         \t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">  \t            \t<span class=\"comment\">// 权限未被授予时的操作，如：</span></div><div class=\"line\">   \t            \tToast.makeText(MainActivity.<span class=\"keyword\">this</span>, <span class=\"string\">\"OH...Permission has been Denied.\"</span>, Toast.LENGTH_SHORT).show();</div><div class=\"line\">          \t\t&#125;</div><div class=\"line\">   \t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在 activity 销毁时对已获取的权限操作进行销毁，如此处我们调用的 locationManager：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span>  <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">super</span>.onDestroy();</div><div class=\"line\">\t<span class=\"keyword\">if</span> (locationManager != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\tlocationManager.removeUpdates(locationListener);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>最后，别忘记在 AndroidManifest.xml 中注册权限：<br><code>&lt;uses-permission android:name=&quot;android.permission.ACCESS_FINE_LOCATION&quot;/&gt;</code><br>觉得有用的话，欢迎关注、评论及 Github 上的follow、star :P</p>\n<hr>\n<ul>\n<li>07/31/2016 16:55 <h4 id=\"更新：新增多权限请求同时申请：\"><a href=\"#更新：新增多权限请求同时申请：\" class=\"headerlink\" title=\"更新：新增多权限请求同时申请：\"></a>更新：新增多权限请求同时申请：</h4>先在manifest中注册以下权限，再将checkPermission()改为如下内容</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">checkPermission</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//判断当前Activity是否已经获得了以下权限</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> (ContextCompat.checkSelfPermission(<span class=\"keyword\">this</span>, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED</div><div class=\"line\">    \t\t|| ContextCompat.checkSelfPermission(<span class=\"keyword\">this</span>, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED) &#123;</div><div class=\"line\">            requestMultiplePermissions();</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            locationProvider();</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>注意观察 requestPermission() 的第二个参数是个字符串数组，由此可知可以同时添加多个权限，只需要将权限所对应的字符串添加到数组里面即可。增加如下方法，用于同时添加多个权限：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">requestMultiplePermissions</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    \t    String[] permissions = &#123;Manifest.permission.ACCESS_FINE_LOCATION, Manifest.permission.ACCESS_COARSE_LOCATION,</div><div class=\"line\">                Manifest.permission.WRITE_EXTERNAL_STORAGE, Manifest.permission.READ_PHONE_STATE,</div><div class=\"line\">                Manifest.permission.GET_ACCOUNTS&#125;;</div><div class=\"line\">        ActivityCompat.requestPermissions(<span class=\"keyword\">this</span>, permissions, MULTIPLE_PERMISSION_ASK_CODE);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>07/31/2016 17:03 <h4 id=\"更新：有权限被拒绝时弹窗提醒\"><a href=\"#更新：有权限被拒绝时弹窗提醒\" class=\"headerlink\" title=\"更新：有权限被拒绝时弹窗提醒\"></a>更新：有权限被拒绝时弹窗提醒</h4>若我们所需要的权限（必要权限）被拒绝时，必将影响用户体验，因此在回调权限申请的结果函数中设置权限被否决的弹窗提醒，点击 「OK」则再次弹出申请权限对话框，点击取消…我也不好再不要脸的去申请了…</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onRequestPermissionsResult</span><span class=\"params\">(<span class=\"keyword\">int</span> requestCode, String permissions[], <span class=\"keyword\">int</span>[] grantResults)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">switch</span> (requestCode) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> MULTIPLE_PERMISSION_ASK_CODE: &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (ContextCompat.checkSelfPermission(<span class=\"keyword\">this</span>, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED</div><div class=\"line\">                        || ContextCompat.checkSelfPermission(<span class=\"keyword\">this</span>, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED) &#123;</div><div class=\"line\">                    <span class=\"comment\">//申请失败，可以继续向用户解释</span></div><div class=\"line\">                    AlertDialog.Builder builder = <span class=\"keyword\">new</span> AlertDialog.Builder(<span class=\"keyword\">this</span>);</div><div class=\"line\">                    builder.setTitle(<span class=\"string\">\"Help\"</span>)</div><div class=\"line\">                            .setMessage(<span class=\"string\">\"Need some permission to run this app.\"</span>)</div><div class=\"line\">                            .setPositiveButton(<span class=\"string\">\"OK\"</span>, <span class=\"keyword\">new</span> DialogInterface.OnClickListener() &#123;</div><div class=\"line\">                                <span class=\"meta\">@Override</span></div><div class=\"line\">                                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(DialogInterface dialog, <span class=\"keyword\">int</span> which)</span> </span>&#123;</div><div class=\"line\">                                    checkPermission();</div><div class=\"line\">                                &#125;</div><div class=\"line\">                            &#125;)</div><div class=\"line\">                            .setNegativeButton(<span class=\"string\">\"Cancel\"</span>, <span class=\"keyword\">new</span> DialogInterface.OnClickListener() &#123;</div><div class=\"line\">                                <span class=\"meta\">@Override</span></div><div class=\"line\">                                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(DialogInterface dialog, <span class=\"keyword\">int</span> which)</span> </span>&#123;</div><div class=\"line\">                                &#125;</div><div class=\"line\">                            &#125;)</div><div class=\"line\">                            .show();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>08/01/2016 10:03 <h4 id=\"更新：-特殊权限申请（实例代码中未附）\"><a href=\"#更新：-特殊权限申请（实例代码中未附）\" class=\"headerlink\" title=\"更新： 特殊权限申请（实例代码中未附）\"></a>更新： 特殊权限申请（实例代码中未附）</h4>以上所讲的权限申请属于危险权限范畴（权限分类区别网上太多了，这里就不重复了），接下来讲的是「WRITE_SETTING」,「SYSTEM_ALERT_WINDOW」这两个特殊权限的申请，这里以申请「SYSTEM_ALERT_WINDOW」权限为例：</li>\n</ul>\n<p>定义一个请求特殊权限的方法，该方法中使用 Intent 打开属于这个应用程序的「SETTING」窗口中的「ACTION_MANAGE_OVERLAY_PERMISSION」来让用户手动获取特殊权限。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span>  <span class=\"keyword\">void</span> <span class=\"title\">requestAlertWindowPermission</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\tIntent intent = <span class=\"keyword\">new</span> Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION);</div><div class=\"line\">\tintent.setData(Uri.parse(<span class=\"string\">\"package:\"</span> + getPackageName()));</div><div class=\"line\">\tstartActivityForResult(intent, REQUEST_CODE);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>再在 onCreate()方法中判断该应用程序所运行的系统的 SDK 版本，若系统的 SDK 版本高于23，则调用上面的特殊权限申请方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &lt; <span class=\"number\">23</span>) &#123;</div><div class=\"line\">\t<span class=\"comment\">// SDK 版本小于23则不需要显式申请</span></div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t<span class=\"comment\">// 若canDrawOverlays() 返回假，</span></div><div class=\"line\">\t<span class=\"comment\">// 则调用请求显示申请特殊权限的函数</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> (!Settings.canDrawOverlays(<span class=\"keyword\">this</span>)) &#123;</div><div class=\"line\">    \trequestAlertWindowPermission();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>最后，由于请求授予权限的方法是使用 <code>startActivityForResult()</code> 方法来授予权限的，自然会返回一个启动 Activity 的结果，无论是否成功，该结果都会回调 <code>onActivityResult()</code> 方法。复写该方法，并在该方法中使用之前 <code>startActivityForResult()</code> 中传入的  <code>REQUEST_CODE</code> 参数来对相应 Activity 返回的结果做出反应。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityResult</span><span class=\"params\">(<span class=\"keyword\">int</span> requestCode, <span class=\"keyword\">int</span> resultCode, Intent data)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onActivityResult(requestCode, resultCode, data);</div><div class=\"line\">        <span class=\"keyword\">if</span> (requestCode == REQUEST_CODE) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (Settings.canDrawOverlays(<span class=\"keyword\">this</span>)) &#123;</div><div class=\"line\">                <span class=\"comment\">// 权限申请成功，执行下一步操作</span></div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"comment\">// 权限申请失败</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>这里为方便大家使用，我写了一个权限申请失败后弹出对话框提醒用户需要同意该权限的「AlertDialog」，若用户同意则再次申请，否则…我也不知如何是好了，笑cry：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">AlertDialog.Builder builder = <span class=\"keyword\">new</span> AlertDialog.Builder(<span class=\"keyword\">this</span>);</div><div class=\"line\">            builder.setTitle(<span class=\"string\">\"Help\"</span>)</div><div class=\"line\">                    .setMessage(<span class=\"string\">\"Need some permission to run this app.\"</span>)</div><div class=\"line\">                    .setPositiveButton(<span class=\"string\">\"OK\"</span>, <span class=\"keyword\">new</span> DialogInterface.OnClickListener() &#123;</div><div class=\"line\">                        <span class=\"meta\">@Override</span></div><div class=\"line\">                        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(DialogInterface dialog, <span class=\"keyword\">int</span> which)</span> </span>&#123;</div><div class=\"line\">                            requestAlertWindowPermission();</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;)</div><div class=\"line\">                    .setNegativeButton(<span class=\"string\">\"Cancel\"</span>, <span class=\"keyword\">new</span> DialogInterface.OnClickListener() &#123;</div><div class=\"line\">                        <span class=\"meta\">@Override</span></div><div class=\"line\">                        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(DialogInterface dialog, <span class=\"keyword\">int</span> which)</span> </span>&#123;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;)</div><div class=\"line\">                    .show();</div></pre></td></tr></table></figure>\n<p>同理，申请「WRITE_SETTING」只需将 <code>Intent intent = new Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION);</code> 中的参数改为 <code>Settings.ACTION_MANAGE_WRITE_SETTINGS</code>即可，当然，方法名和请求码也应该作出相应改变。</p>\n<p>实例代码：<a href=\"https://github.com/thirtyyuan/Android-exercise/tree/master/Runtime%20Permission\" target=\"_blank\" rel=\"external\">LocationTest</a></p>\n<p>参考资料：Google android 官方文档：<a href=\"https://developer.android.com/training/permissions/requesting.html\" target=\"_blank\" rel=\"external\">Requesting Permissions at Run Time</a>；郭霖大神的「第一行代码」及<a href=\"http://chuansong.me/n/355262951150\" target=\"_blank\" rel=\"external\">「教你如何在Android 6.0上创建系统悬浮窗」</a>；微凉一季的<a href=\"http://jijiaxin89.com/2015/08/30/Android-s-Runtime-Permission/\" target=\"_blank\" rel=\"external\">「Android M 新的运行时权限开发者需要知道的一切」</a></p>\n<p>其他推荐：郭霖的<a href=\"http://blog.csdn.net/guolin_blog/article/details/51336415\" target=\"_blank\" rel=\"external\">「Android提醒微技巧，你真的了解Dialog、Toast和Snackbar吗？」</a></p>\n"},{"title":"android开发——环境搭建","url":"http://thirtyyuan.github.io/2016/07/10/android开发——环境搭建/","content":"<p>放张stormzhang亲笔写的话和签名镇楼：<br><img src=\"https://cloud.githubusercontent.com/assets/16081968/16676550/d3971168-44fd-11e6-87ad-a3a3f640c4b3.png\" alt=\"stormzhang\"><br><a id=\"more\"></a></p>\n<h2 id=\"Java开发环境配置\"><a href=\"#Java开发环境配置\" class=\"headerlink\" title=\" Java开发环境配置 \"></a><strong> Java开发环境配置 </strong></h2><p>JDK是java开发包的缩写，是整个Java的核心，包括了Java运行环境、Java工具和Java基础类库（待会使用的java命令就在里面）。</p>\n<p>到Oracle官网，选择相应系统版本的JDK(Mac自带JDK版本过低)，并勾选下载jdk框头的<code>Accept License Agreement</code>，<a href=\"http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\" target=\"_blank\" rel=\"external\">JDK下载地址</a>，下载完成后安装。</p>\n<h5 id=\"Mac-OS\"><a href=\"#Mac-OS\" class=\"headerlink\" title=\" Mac OS \"></a><strong> Mac OS </strong></h5><p>查看当前java版本：（系统已经集成JDK，但版本较低，需要重新配置）打开“终端（Terminal）”，输入<code>java -version</code>（有空格），若显示<code>java version 1.8.0_xxx</code>则无需配置，直接看开发部分；<br>安装：点下一步就好；<br>配置环境变量：无需配置，但必须知道JDK安装位置在(/Macintosh HD由于是根目录，一般写~)：<code>~/Library/Java/JavaVirtualMahines</code></p>\n<h5 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\" Windows \"></a><strong> Windows </strong></h5><p>请参考下面链接，注意配置“path变量”、“classpath变量”的是系统变量，不是用户变量！以及每一个标点不要乱打多打。不懂就问是在图财害命，不懂就搜索才是程序员。<a href=\"http://jingyan.baidu.com/article/ab69b270c01a4d2ca7189f8c.html\" target=\"_blank\" rel=\"external\">windows java环境变量配置</a></p>\n<h2 id=\"Java开发工具\"><a href=\"#Java开发工具\" class=\"headerlink\" title=\" Java开发工具 \"></a><strong> Java开发工具 </strong></h2><p>稍懂一点的同学可能会问：什么？就可以了？不是听说要用Eclipse(一款强大的IDE（集成开发环境）)开发吗？答：以学习android所需要的java基础，还用不上那么强大的企业级开发工具。现在需要的只有两样东西：命令行＋文本编辑器。这种java开发方式适合小型项目和练习使用，既经济环保，又高效迅捷，最重要的是能帮助初学者了解java项目的编译过程。</p>\n<h5 id=\"Mac-OS-1\"><a href=\"#Mac-OS-1\" class=\"headerlink\" title=\" Mac OS \"></a><strong> Mac OS </strong></h5><p>推荐使用“Sublime Text”，注意创建新文本后(command + N)，首行即为文件名，如创建“Test.java”文件，首行输入<code>Test.java</code>后按下 “command + S” ，文件即被创建。但是在编译前必须将该行删除，否则会被认为是代码的一部分而报错。</p>\n<h5 id=\"Windows-1\"><a href=\"#Windows-1\" class=\"headerlink\" title=\" Windows \"></a><strong> Windows </strong></h5><p>推荐使用“notepad++”，新建后即可开始写出java代码，保存时将文件名后缀改为 “.java” 文件即可。</p>\n<p>至于如何编译java文件，就是之后要去自学的事了，推荐mars老师的《java4android》视频教程，看视频时注意多敲多想，不懂的地方可以自己敲代码验证，懂的地方可以敲快一点。</p>\n<h2 id=\"Android开发环境搭建\"><a href=\"#Android开发环境搭建\" class=\"headerlink\" title=\" Android开发环境搭建 \"></a><strong> Android开发环境搭建 </strong></h2><p>Android studio2.0（Win和Mac都有) :<a href=\"http://pan.baidu.com/s/1b1031s\" target=\"_blank\" rel=\"external\">下载地址</a> 密码: c77r<br>    你可能听过可以使用Eclipse的ADT(android development tools)插件进行安卓开发，但那已经过时了，Google已经停止提供对Eclipse的ADT支持，已经无法在最新的android系统下进行开发。现在Google推出的android studio已经成为了android开发的主流IDE，前不久刚升级android studio2.0版本，只是新功能对国内开发者来说…有点尴尬，详情请看<a href=\"http://mp.weixin.qq.com/s?__biz=MzA4NTQwNDcyMA==&amp;mid=2650661399&amp;idx=1&amp;sn=877894e93b57e152dc794dae5b382538&amp;scene=23&amp;srcid=0429Yt0RIHcAHyZ7jGhbOq04#rd\" target=\"_blank\" rel=\"external\">stormzhang谈 AS 2.0</a><br><img src=\"https://cloud.githubusercontent.com/assets/16081968/16676818/76aad4f4-4501-11e6-88b5-9e72e7df5fd1.png\" alt=\"AS 2.0\"></p>\n<ol>\n<li><p><strong> 新建项目 </strong></p>\n<p> 还是请看stormzhang博客，但是在下载SDK那步，能不下就不下，因为是要到Google的服务器下载，你懂的，不过不用担心，前几天帮同学装时似乎是不需要翻墙了，就算需要我也有办法帮你解决。新建项目过程请看：<a href=\"http://stormzhang.com/devtools/2014/11/25/android-studio-tutorial1/\" target=\"_blank\" rel=\"external\">AS 系列教程</a></p>\n</li>\n<li><p><strong> 使用镜像服务器 </strong></p>\n<p> SDK等默认从Google服务器下载，慢和翻墙是必须的，使用镜像服务器就可以解决这种问题。使用方法和地址: <a href=\"http://tools.android-studio.org/index.php/85-tools/110-androidsdk-mirrors\" target=\"_blank\" rel=\"external\">Android SDK 在线更新镜像</a>。注意: <code>Http proxy</code> 找不到在哪，可以打开<code>preference</code>，搜索框输入<code>proxy</code> ，如下图左上角：<br> <img src=\"https://cloud.githubusercontent.com/assets/16081968/16676974/f2de6422-4502-11e6-8c2d-25c3a040b058.png\" alt=\"http porxy\">,之后就开始学习开发app吧！</p>\n</li>\n</ol>\n<p>最后，既然选择了开始，那就坚持每天学习、进步一点点，下个CSDN、逛逛gank.io(有妹子图福利)，fork个Github，关注几个大牛开发者，加个优质群看看别人讨论的问题，学习material design设计规范，学习用面向对象思想思考身边的问题，这些教你的绝对比我能教你的多，为了我们所热爱的一切，怀挺！</p>\n"},{"title":"你好，世界。","url":"http://thirtyyuan.github.io/2016/07/06/hello-world/","content":"<p>虽然很不想用这个万人用过的标题作为标题，但似乎没有一个问候语能比它跟简洁有力。</p>\n<p>这次我把博客挪了个窝，学习做一些简单的前端是一个目的，更重要的是，我可以随意更改我文章所依托的平台的样式及内容了。我之前尝试过 Github Issue 作博客，相当的简洁方便，酷爱至极。但慢慢的，它的一些不足暴露了出来。可能观众都不在意，但是你确实没办法 DIY 一个你喜欢的阅读界面给他们，每次打开，我必须得忍受那些我不喜欢的界面。</p>\n<p>由于理念差异太大，既喜欢带着简洁美感去阅读，又喜欢看到别人的评论并与之交流，所以有了现在你所看到的我的博客。当然，之后我会教各位如何搭建基于 Github Pages 的个人博客，网上也有很全的教程，我主要把我踩的坑的解决方法分享出来。</p>\n<p>明天是你喜欢的日子，但是为了之后的惊喜，暂时不告诉你了:P</p>\n"},{"title":"给 Arduino 插上互联网的翅膀","url":"http://thirtyyuan.github.io/2016/06/04/给-Arduino-插上互联网的翅膀/","content":"<h2 id=\"挑选联网模块\"><a href=\"#挑选联网模块\" class=\"headerlink\" title=\"挑选联网模块\"></a>挑选联网模块</h2><p>Arduino联网根据联网是否需要在wifi附近分为两种不同形式：wifi模块（附近需要wifi源），GPRS模块（通过手机卡的GPRS信号联网）。具体需要用何种模块，需要看你产品的使用环境，如果是在家、厂里或附近（一般不超过20米，否则效果不好），则可以使用wifi模块，这样就不需要多买一张SIM卡。产品若要工作在室外，则不得不使用GPRS模块了。<a id=\"more\"></a><br>推荐产品：<br>    wifi模块：ESP8266、W5100；<br>    GPRS模块：SIM900；（单买各模块的邮费较贵，建议几人合资购买或攒一些模块一起购买，店家不作推荐）<br>    最后，别忘记最重要的一点！购买USB转TTL模块（或者买直接封装成产品，有类似U盘外壳的那种）</p>\n<h2 id=\"接线\"><a href=\"#接线\" class=\"headerlink\" title=\"接线\"></a>接线</h2><p>到货后，第一件事便是测试啦！是不是有点小激动？Mac的童鞋注意啦，平时让你 OS X 用得嗨，现在可就没那么便宜你了，先装个 Windows7 或 10 再说（请使用 VMware，最好装win10，因为win7有的是精简版，驱动各种装不了，连正版 Arduino 驱动都没发装），因为要用的软件在 Mac 没有或没有那么方便。废话少说，先接线（网上接线教程较乱，简直神坑，让我接了这个又接那个，到底接哪个才是对的！？此文就是来改变这种局面的）：<br>ESP8266引脚图：<br><img src=\"https://ww3.sinaimg.cn/large/006y8lVajw1fbeq1dglvdj30n8122go9.jpg\" alt=\"ESP8266引脚图\"></p>\n<p>首先跟USB转TTL模块连接：</p>\n<table>\n<thead>\n<tr>\n<th>ESP8266</th>\n<th>USB-TTL</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Gnd</td>\n<td>Gnd</td>\n</tr>\n<tr>\n<td>Vcc</td>\n<td>3V3</td>\n</tr>\n<tr>\n<td>CH_PD</td>\n<td>3V3</td>\n</tr>\n<tr>\n<td>TX</td>\n<td>RX</td>\n</tr>\n<tr>\n<td>RX</td>\n<td>TX</td>\n</tr>\n</tbody>\n</table>\n<p>Vcc千万记得接3v3！接5v的可以自己试试，据说接一晚上不会有事，但千万别作死。TX接USB转TTL的RX，RX接USB转TTL的TX，永远记得任何模块的TX／RX接另一模块的RX/TX。</p>\n<p>SIM900接线图：<br><img src=\"https://ww4.sinaimg.cn/large/006y8lVajw1fbeq7szng7j30za0qaq6p.jpg\" alt=\"SIM900接线图\"><br>首先请将SIM接入SIM900卡槽！红黑两线分别为Vcc和Gnd你懂的，Vcc接5V即可，TX/RX对应的口在图中白色方块上有写，接USB-TTL的方法与ESP8266相同。</p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>模块接到 USB-TTL 后，UBS-TTL 的 USB 一端接到电脑 USB 口，此时开始有的电脑USB驱动会安装失败（特别是 Win7 系统），这时，开始菜单，搜索 “设备管理器” ，打开 “端口（ COM 和 LPT ）”，找到带黄色感叹号的那个 COM 口双击后选择 “自动获取xxx”，过一段时间后就安装好驱动了，实在不行就搜一下驱动安装吧，反正官网下的win10就是这么简单就行了。<br>USB-TTL 驱动安装完成后，自行下载安装 “sscom串口调试助手”（其它串口调试助手也可以）。打开后一般会自动识别COM口，记得无论ESP8266还是SIM900，都将串口调试助手波特率为115200（不懂什么是波特率的在捣鼓完后请搜索解决），勾选☑️发送新行，在“字符串输入框”输入“AT”，点击发送，对话框返回“OK”则说明接线正常，ESP8266 或 SIM900 模块已经启动了（乱码是因为模块上电后还没实现串口同步工作，再发一次 “AT” 即可）。<br><img src=\"https://ww4.sinaimg.cn/large/006y8lVajw1fbeqarkn3vj30z80rc41x.jpg\" alt=\"AT指令测试图\"></p>\n<h2 id=\"串口调试\"><a href=\"#串口调试\" class=\"headerlink\" title=\"串口调试\"></a>串口调试</h2><p> 由此开始，连接互联网的大幕即将开启！<br>首先推荐几个国内比较不错的物联网平台：乐为物联网、贝壳物联、yeelink（我可没收广告费！做项目的过程中对我们帮助不小，免费广告下），先去注册吧，注册时记住几个地方 “userkey” 、 “deviceKey” 、 “tcpID” ，本次测试基于乐为物联网平台。<br>接着前面发送 “AT” 后返回 “ok” 的那步，依次输入（注意不能有空格，每次执行等几秒待执行完毕，不返回error就没问题）：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">AT//test AT launch?</div><div class=\"line\">AT+RST//restart</div><div class=\"line\">AT+CWMODE=3//设置ap+st混合模式</div><div class=\"line\">AT+CWJAP=“wifiName”,”wifiPassword”</div><div class=\"line\">AT+CIFSR//返回本地 ip 地址</div><div class=\"line\">AT+CIPMUX=0//启动单路连接模式</div><div class=\"line\">AT+CIPMODE=1//设置模块传输模式为透传模式</div><div class=\"line\">AT+CIOBAUD=9600//修改模块波特率为9600，这步是为了方便之后用Arduino串口与模块通信，执行后需要将串口调试助手波特率改为9600</div><div class=\"line\">AT+CIPSTART=&quot;TCP&quot;,&quot;tcp.lewei50.com&quot;,9960／／建立tcp连接</div><div class=\"line\">AT+CIPSEND//发送数据</div><div class=\"line\">&#123;&quot;method&quot;:&quot;update&quot;,&quot;gatewayNo”:“xxx”,”userkey”:”xxxxxx”&#125;&amp;^!</div><div class=\"line\">//数据内容（几行都是一个整体，不能回车或空格！）</div><div class=\"line\">&#123;&quot;method&quot;:&quot;upload&quot;,&quot;data&quot;:[&#123;&quot;Name&quot;:&quot;1&quot;,&quot;Value&quot;:&quot;33&quot;&#125;,&#123;&quot;Name&quot;:&quot;2&quot;,&quot;Value&quot;:&quot;96.2&quot;&#125;,&#123;&quot;Name&quot;:&quot;3&quot;,&quot;Value&quot;:&quot;710&quot;&#125;]&#125;&amp;^!</div></pre></td></tr></table></figure></p>\n<p><code>gatewayNo</code>后面的内容为你注册时自定义的设备标识，<code>userkey</code>后面的内容为你独一无二的用户 ID，<code>name</code> 为自定义的传感器标识，<code>value</code>为发送给服务器的传感器的值<br>若以上几步均没有问题，恭喜你！但是手动输入是不是很麻烦？接下来就是写入 Arduino，让 Arduino 代替你来执行这些命令了！</p>\n<h2 id=\"写入-Arduino\"><a href=\"#写入-Arduino\" class=\"headerlink\" title=\"写入 Arduino\"></a>写入 Arduino</h2><p><a href=\"https://github.com/thirtyyuan/Ardiuno/tree/ArduinoTcp\" target=\"_blank\" rel=\"external\">源码地址</a>,<br>个人觉得源码已经留好了接口，可修改性很强，若实在不懂的请联系我。修改链接里的代码，按照前面AT指令里修改的<code>userkey</code>等地方即可，为了数据曲线看上去光滑美观，加了<code>timer</code>计数器和<code>millis()</code>函数，测试时为了尽快看到是否连接网络，注释相关代码即可，注意括号要成对注释！（若有其它模块，则可能电脑USB电压供电不足，需要烧入代码后用手机充电插头接在电源线一段供电）<br>将 USB-TTL 的 TTL 端的接线一对一接到 Arduino 板上，将修改后代码烧入 Arduino 板即可。</p>\n"},{"title":"如果我能成为一名海盗","url":"http://thirtyyuan.github.io/2015/11/30/如果我能成为一名海盗/","content":"<p><img src=\"https://ww4.sinaimg.cn/large/006tNbRwgw1fb329nz6k8j307705e0t1.jpg\" alt=\"杰克斯派洛\"><a id=\"more\"></a><br>在19世纪的加勒比海上，流传着一个不朽的海盗的名字——杰克·斯派诺，他是人们心中自由与智慧的象征。他不屈服于权威，率领着黑珍珠号上的船员们击溃过英国皇家海军；他不惧强敌，公然与让人闻风丧胆的“鬼船”船长戴维·琼斯为敌，用利刃刺过戴维·琼斯的不死之心。一切的胜利，除了智慧与幸运的因素之外，他还有一件别人看来无用而可笑的法宝——一个失去了指向性的指南针，但它却可以指向你心里所想的事物和地点。</p>\n<p>他的每次扬帆出行在别人看来都是盲目的，因为他根本没有地图甚至任何地理坐标，所以他在人们眼中可能和疯子没什么区别。但他自己知道，他要去的，就是他心里想的地方，任凭别人如何嘲笑他，他也会坚定向前，朝着他心里所想的地方远行。</p>\n<p>在20世纪的美国西部，也有这样一位“海盗船长”——史蒂夫·乔布斯。他是许多人的精神偶像，甚至有斯坦福大学的学生因为听了他的毕业演讲而放弃了待遇优厚的工作，投身于社会福利事业中，要知道，乔布斯只读了6个月的大学。与杰克船长一样，他也是一位不屈服于权威、不惧强敌的“海盗船长”。<img src=\"https://ww2.sinaimg.cn/large/006tNbRwgw1fb32afqoewj30fa0atmxu.jpg\" alt=\"史蒂夫·乔布斯\"></p>\n<p>在苹果公司全力开发丽萨电脑期间，他不顾董事会的反对，带领他的团队开发了一款性能相近，但售价却更加亲民的Mac电脑与本公司的丽萨团队形成竞争。甚至公然在办公楼上悬挂了一面海盗旗，向丽萨团队和苹果管理层那些他看来是因循守旧的“海军”宣战。<br>面对强大的“蓝色巨人”英特尔，发出了一则题为“为什么1984不会成为所谓的1984”的广告，将因特尔比作步伐缓慢、有着无数人信奉的独裁“教主”，一位链球运动员将一把大锤砸向正在播放“教主”宣讲画面的大屏幕，以示人们“苹果将会打破个人电脑市场将在1984年被英特尔垄断的预言。而最终，整个苹果公司的个人电脑市场份额也得以继续提高，直到现在，Mac电脑依旧占据了个人电脑领域举足轻重的市场份额。</p>\n<p>当他重返苹果时，他依旧爱着这个他一手培养、中途却抛弃过他的孩子，他依旧是如此的桀骜不驯，执掌着一个快要破产的公司，却向世人抛出了“非同凡想”广告以示一个属于他的那个变革的时代即将到来。“向那些疯狂的家伙致敬……或许他们是别人眼里的疯子，但却是我们眼中的天才。因为只有那些疯狂到以为自己能够改变世界的人才能真正的改变世界”。</p>\n<p>“为什么要做海军？如果你能成为一名海盗的话。”我们在生活中不可避免的会面对如此让人难以选择的情况，究竟怎样取舍完全取决于自己。而我，则会义无反顾的成为一名海盗，因为我知道直觉大多是正确而完全不违背本心的，我相信，我的那枚“失灵”了的指南针终会随着我的心，将我带向充满阳光的彼岸，也正因为那是我心之所向的地方，一路上即使有再多的苦难也将是愉快而值得骄傲的。<br>                                                                               ——by：thirtyyuan<br>                                                                                         2015.11.30</p>\n"},{"title":"404 Not Found：网页跑丢了:D","url":"http://thirtyyuan.github.io//404.html","content":"<style type=\"text/css\">\n    .article-title {\n        font-size: 2.1em;\n    }\n    strong a {\n        color: #747474;\n    }\n    .share {\n        display: none;\n    }\n    .player {\n        margin-left: -10px;\n    }\n    .sign {\n        text-align: right;\n        font-style: italic;\n    }\n    #page-visit {\n        display: none;\n    }\n    .center {\n        text-align: center;\n        height: 2.5em;\n        font-weight: bold;\n    }\n    .search2 {\n        height: 2.2em;\n        font-size: 1em;\n        width: 50%;\n        margin: auto 24%;\n        color: #727272;\n        opacity: .6;\n        border: 2px solid lightgray;\n    }\n    .search2:hover {\n        opacity: 1;\n        box-shadow: 0 0 10px rgba(0, 0, 0, 0.3)\n        };\n    .article-entry hr {\n        margin: 0;\n    }\n    .pic {\n        text-align: center;\n        margin: 0;\n    }\n    .pic br {\n        display: none;\n    }\n</style>\n\n<hr>\n<p class=\"center\">很抱歉，您所访问的地址跑丢了: </p>\n\n<p></p><p class=\"center\"><a href=\"/\">回主页</a> · <a href=\"/archives\">所有文章</a></p>\n<div style=\"text-align: center\"><br>以下是博主喜欢的一些歌曲，可以听听，稍作休息 :D<br><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"300\" height=\"300\" src=\"http://music.163.com/outchain/player?type=0&id=156442072&auto=0&height=430\"></iframe><br></div>"},{"title":"RSS","url":"http://thirtyyuan.github.io/RSS/index.html","content":""},{"title":"about","url":"http://thirtyyuan.github.io/about/index.html","content":""},{"title":"category","url":"http://thirtyyuan.github.io/category/index.html","content":""},{"title":"project","url":"http://thirtyyuan.github.io/project/index.html","content":""},{"title":"link","url":"http://thirtyyuan.github.io/link/index.html","content":""},{"title":"tag","url":"http://thirtyyuan.github.io/tag/index.html","content":""},{"title":"search","url":"http://thirtyyuan.github.io/search/index.html","content":""},{"title":"作品展示","url":"http://thirtyyuan.github.io/works/index.html","content":"<style type=\"text/css\">\n    .article-title {\n        font-size: 2.1em;\n    }\n    strong a {\n        color: #747474;\n    }\n    .share {\n        display: none;\n    }\n    .player {\n        margin-left: -10px;\n    }\n    .sign {\n        text-align: right;\n        font-style: italic;\n    }\n    #page-visit {\n        display: none;\n    }\n    .center {\n        text-align: center;\n        height: 2.5em;\n        font-weight: bold;\n    }\n    .search2 {\n        height: 2.2em;\n        font-size: 1em;\n        width: 50%;\n        margin: auto 24%;\n        color: #727272;\n        opacity: .6;\n        border: 2px solid lightgray;\n    }\n    .search2:hover {\n        opacity: 1;\n        box-shadow: 0 0 10px rgba(0, 0, 0, 0.3)\n        };\n    .article-entry hr {\n        margin: 0;\n    }\n    .pic {\n        text-align: center;\n        margin: 0;\n    }\n    .pic br {\n        display: none;\n    }\n</style>\n\n<hr>\n<p class=\"center\">很抱歉，博主暂时没有上传作品 Q_Q </p>\n\n<p></p><p class=\"center\"><a href=\"/\">回主页</a> · <a href=\"/archives\">所有文章</a></p>\n<div style=\"text-align: center\"><br>以下是博主喜欢的一些歌曲，可以听听，稍作休息 :D<br><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"320\" height=\"330\" src=\"http://music.163.com/outchain/player?type=0&id=156442072&auto=0&height=430\"></iframe><br></div>"}]